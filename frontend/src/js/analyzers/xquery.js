/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[30,66,77,78,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124],$V1=[2,63],$V2=[1,26],$V3=[1,17],$V4=[1,18],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,14],$Vb=[1,15],$Vc=[1,16],$Vd=[1,13],$Ve=[5,74],$Vf=[1,44],$Vg=[1,50],$Vh=[1,32],$Vi=[1,33],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,64],$Vo=[1,65],$Vp=[1,40],$Vq=[1,41],$Vr=[1,42],$Vs=[1,43],$Vt=[1,51],$Vu=[1,52],$Vv=[1,53],$Vw=[1,54],$Vx=[1,55],$Vy=[1,56],$Vz=[1,57],$VA=[1,58],$VB=[1,59],$VC=[1,60],$VD=[1,61],$VE=[1,62],$VF=[1,63],$VG=[5,19,26,28,36,47,48,49,50,51,52,58,65],$VH=[2,6],$VI=[1,67],$VJ=[5,9,19,26,28,36,47,48,49,50,51,52,58,65],$VK=[1,80],$VL=[1,77],$VM=[1,79],$VN=[1,78],$VO=[1,82],$VP=[5,9,19,22,25,26,28,30,36,44,47,48,49,50,51,52,58,62,63,65,66,70,74,77,78,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124],$VQ=[2,79],$VR=[1,98],$VS=[5,9,19,22,25,26,28,30,36,44,47,48,49,50,51,52,58,62,63,65,66,70,74,77,78,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124],$VT=[1,117],$VU=[1,118],$VV=[9,58,62,63,65],$VW=[1,128],$VX=[1,122],$VY=[1,123],$VZ=[1,124],$V_=[1,125],$V$=[1,126],$V01=[1,127],$V11=[1,129],$V21=[1,130],$V31=[1,131],$V41=[1,132],$V51=[1,133],$V61=[1,134],$V71=[1,138],$V81=[1,140],$V91=[1,136],$Va1=[1,137],$Vb1=[1,141],$Vc1=[1,139],$Vd1=[1,142],$Ve1=[5,9,19,22,25,26,28,36,44,47,48,49,50,51,52,58,62,63,65,70,84,85,86,87,88,89,90,91,92,93,94,95,96],$Vf1=[58,62,63,65],$Vg1=[1,175],$Vh1=[78,88],$Vi1=[9,22,30,34,78,86,88,94,95,101,115],$Vj1=[1,194],$Vk1=[1,199],$Vl1=[9,22],$Vm1=[5,9,19,26,28,36,47,48,49,50,51,52,58,62,63,65],$Vn1=[5,9,19,22,25,26,28,36,47,48,49,50,51,52,58,62,63,65,70,84,85,86,87,88,93,94,95,96],$Vo1=[5,9,19,22,25,26,28,36,47,48,49,50,51,52,58,62,63,65,70,84,85,86,87,88,89,90,93,94,95,96],$Vp1=[1,229],$Vq1=[5,9,19,25,26,28,36,47,48,49,50,51,52,58,65],$Vr1=[1,260],$Vs1=[9,22,34],$Vt1=[9,22,34,43,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"XPATH_U":4,"EOF":5,"XQUERY":6,"INSTR_QUERY":7,"COMX":8,"tk_coma":9,"FOR_LOOP":10,"LET_CLAUSE":11,"RETURN_STATEMENT":12,"FUNCIONES":13,"LLAMADA":14,"IF_THEN_ELSE":15,"IF":16,"THEN":17,"ELSE":18,"tk_if":19,"tk_ParA":20,"E":21,"tk_ParC":22,"tk_then":23,"HTML":24,"tk_else":25,"tk_declare":26,"tk_function":27,"tk_local":28,"tk_dospts":29,"tk_id":30,"LISTA_PARAMETROS":31,"tk_as":32,"DATATPYE":33,"tk_labre":34,"INSTR_FUNCIONES":35,"tk_lcierra":36,"tk_ptcoma":37,"PARAMETRO":38,"VARIABLE":39,"tk_xs":40,"RESERVED_TYPES":41,"TERM":42,"tk_interrogacion":43,"tk_asterisco":44,"VALORES":45,"NATIVAS":46,"tk_uppercase":47,"tk_lowercase":48,"tk_string":49,"tk_number":50,"tk_substring":51,"tk_for":52,"DECLARACION":53,"INSTRUCCIONES_FOR":54,"INSTR_FOR_P":55,"WHERE_CONDITION":56,"ORDER_BY":57,"tk_let":58,"tk_2puntos_igual":59,"DECLARACIONPP":60,"COMA_AUX":61,"tk_where":62,"tk_order":63,"tk_by":64,"tk_return":65,"tk_dolar":66,"DECLARACIONP":67,"tk_in":68,"tk_at":69,"tk_to":70,"DOC":71,"tk_doc":72,"STRING":73,"tk_line":74,"XPATH":75,"QUERY":76,"tk_2bar":77,"tk_bar":78,"CORCHETP":79,"EXP_PR":80,"AXIS":81,"CORCHET":82,"tk_corA":83,"tk_corC":84,"tk_menorigual":85,"tk_menor":86,"tk_mayorigual":87,"tk_mayor":88,"tk_mas":89,"tk_menos":90,"tk_div":91,"tk_mod":92,"tk_or":93,"tk_and":94,"tk_equal":95,"tk_diferent":96,"tk_data":97,"FUNC":98,"PRIMITIVO":99,"num":100,"tk_punto":101,"tk_2puntos":102,"tk_arroba":103,"tk_string_d":104,"tk_string_s":105,"tk_text":106,"tk_last":107,"tk_position":108,"tk_node":109,"AXISNAME":110,"tk_4puntos":111,"tk_ancestor":112,"tk_ancestor2":113,"tk_attribute":114,"tk_child":115,"tk_descendant":116,"tk_descendant2":117,"tk_following":118,"tk_following2":119,"tk_namespace":120,"tk_parent":121,"tk_preceding":122,"tk_preceding2":123,"tk_self":124,"tk_integer":125,"tk_int":126,"tk_decimal":127,"tk_boolean":128,"tk_normalizedString":129,"tk_token":130,"tk_date":131,"tk_dateTime":132,"tk_duration":133,"tk_time":134,"hexBinary":135,"tk_uri":136,"CNT":137,"ATTRIBUTE_LIST":138,"CONTENT_LL":139,"CONTENT_TAG":140,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_coma",19:"tk_if",20:"tk_ParA",22:"tk_ParC",23:"tk_then",25:"tk_else",26:"tk_declare",27:"tk_function",28:"tk_local",29:"tk_dospts",30:"tk_id",32:"tk_as",34:"tk_labre",36:"tk_lcierra",37:"tk_ptcoma",40:"tk_xs",43:"tk_interrogacion",44:"tk_asterisco",47:"tk_uppercase",48:"tk_lowercase",49:"tk_string",50:"tk_number",51:"tk_substring",52:"tk_for",58:"tk_let",59:"tk_2puntos_igual",62:"tk_where",63:"tk_order",64:"tk_by",65:"tk_return",66:"tk_dolar",68:"tk_in",69:"tk_at",70:"tk_to",72:"tk_doc",74:"tk_line",77:"tk_2bar",78:"tk_bar",83:"tk_corA",84:"tk_corC",85:"tk_menorigual",86:"tk_menor",87:"tk_mayorigual",88:"tk_mayor",89:"tk_mas",90:"tk_menos",91:"tk_div",92:"tk_mod",93:"tk_or",94:"tk_and",95:"tk_equal",96:"tk_diferent",97:"tk_data",100:"num",101:"tk_punto",102:"tk_2puntos",103:"tk_arroba",104:"tk_string_d",105:"tk_string_s",106:"tk_text",107:"tk_last",108:"tk_position",109:"tk_node",111:"tk_4puntos",112:"tk_ancestor",113:"tk_ancestor2",114:"tk_attribute",115:"tk_child",116:"tk_descendant",117:"tk_descendant2",118:"tk_following",119:"tk_following2",120:"tk_namespace",121:"tk_parent",122:"tk_preceding",123:"tk_preceding2",124:"tk_self",125:"tk_integer",126:"tk_int",127:"tk_decimal",128:"tk_boolean",129:"tk_normalizedString",130:"tk_token",131:"tk_date",132:"tk_dateTime",133:"tk_duration",134:"tk_time",135:"hexBinary",136:"tk_uri"},
productions_: [0,[3,2],[3,2],[6,3],[6,2],[8,1],[8,0],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[15,3],[16,4],[17,2],[17,3],[17,2],[18,2],[18,3],[18,2],[18,2],[13,14],[31,3],[31,1],[38,3],[33,4],[42,1],[42,1],[42,0],[35,1],[14,6],[14,4],[46,1],[46,1],[46,1],[46,1],[46,1],[10,4],[10,3],[54,2],[54,1],[55,1],[55,1],[55,1],[11,4],[61,3],[61,1],[56,2],[57,3],[57,3],[12,2],[12,2],[12,2],[39,2],[53,3],[53,1],[67,3],[67,5],[60,5],[60,5],[60,1],[71,4],[71,0],[45,3],[45,1],[4,3],[4,1],[75,2],[75,2],[76,2],[76,2],[76,3],[76,3],[76,1],[76,1],[82,4],[82,3],[79,1],[79,0],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,4],[21,1],[80,2],[80,2],[80,2],[99,1],[99,1],[99,1],[99,1],[99,1],[99,2],[99,2],[73,1],[73,1],[98,3],[98,3],[98,3],[98,3],[81,3],[81,4],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[24,9],[24,8],[24,5],[139,2],[139,1],[140,1],[140,3],[137,1],[137,1],[137,1],[137,1],[137,1],[137,1],[137,1],[138,3],[138,3],[138,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
					prod_1 = grammar_stack.pop();
					prod_2 = grammar_stack.pop();
			 		grammar_stack.push({'ini -> XPATH_U EOF': [prod_2, prod_1]});
					grammar_report =  getGrammarReport(grammar_stack); cst = getCST(grammar_stack); arbol_ast = getASTTree($$[$0-1]);
					ast = { xpath: $$[$0-1], errors: errors, cst: cst, grammar_report: grammar_report,  arbolAST : arbol_ast }; return ast;
                
break;
case 2:

				prod_1 = grammar_stack.pop();
				prod_2 = grammar_stack.pop();
				grammar_stack.push({'ini -> XQUERY EOF': [prod_2, prod_1]});
				grammar_report =  getGrammarReport(grammar_stack); cst = getCST(grammar_stack); arbol_ast = getASTTree($$[$0-1]);
				ast = { xquery: $$[$0-1], errors: errors, cst: cst, grammar_report: grammar_report,  arbolAST : arbol_ast }; return ast;
		
break;
case 3:
 $$[$0-2].push($$[$0-1]); this.$=$$[$0-2]; 
break;
case 4:
 this.$=[$$[$0-1]]; 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 15: case 17: case 18: case 20: case 21: case 30: case 44: case 49: case 50: case 61: case 74: case 75: case 96: case 98: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 158:
 this.$=$$[$0]; 
break;
case 13:
 this.$=queryBuilder.nuevoIf_Then_Else($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 14: case 26:
 this.$=$$[$0-1]; 
break;
case 16: case 19:
 this.$=[]; 
break;
case 22:
 this.$=queryBuilder.nuevaFuncion($$[$0-9], $$[$0-7], $$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column+1); 
break;
case 23: case 46: case 55: case 64:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 24: case 41: case 47: case 65: case 147:
 this.$=[$$[$0]]; 
break;
case 25:
 this.$=queryBuilder.nuevoParametro($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 31:
 this.$=queryBuilder.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 32:
 this.$=queryBuilder.llamadaNativa($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 33:
 this.$ = Tipos.TO_UPPERCASE; 
break;
case 34:
 this.$ = Tipos.TO_LOWERCASE; 
break;
case 35:
 this.$ = Tipos.TO_STRING; 
break;
case 36:
 this.$ = Tipos.TO_NUMBER; 
break;
case 37:
 this.$ = Tipos.SUBSTRING; 
break;
case 38:
 $$[$0-1].push($$[$0]); this.$ = queryBuilder.nuevoFor($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 39:
 this.$ = queryBuilder.nuevoFor($$[$0-1], [$$[$0]], this._$.first_line, this._$.first_column+1); 
break;
case 40: case 146:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 42: case 103:
 this.$ = $$[$0]; 
break;
case 43:
 this.$ = queryBuilder.nuevoOrderBy($$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 45:
 this.$ = queryBuilder.nuevoLet($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 48:
 this.$ = queryBuilder.nuevoWhere($$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 51: case 52: case 53:
 this.$ = queryBuilder.nuevoReturn($$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 54:
 this.$=queryBuilder.nuevaVariable("$"+$$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 56:
 this.$=[$$[$0]] 
break;
case 57:
 this.$ = queryBuilder.nuevaDeclaracion($$[$0-2], null, $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 58:
 this.$ = queryBuilder.nuevaDeclaracion($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 59:
 this.$ = queryBuilder.nuevoIntervalo($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 60:
 $$[$0-1].unshift($$[$0-3]); this.$ = queryBuilder.nuevosValores($$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 66:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2];
								 prod_1 = grammar_stack.pop();
								 prod_2 = grammar_stack.pop();
			 					 grammar_stack.push({'XPATH_U -> XPATH_U tk_line XPATH {S1.push(S3); SS = S1;}': [prod_2, 'token: tk_line\t Lexema: ' + $$[$0-2], prod_1]}); 
break;
case 67:
 this.$=[$$[$0]];
				  prod_1 = grammar_stack.pop();
			 	  grammar_stack.push({'XPATH_U -> XPATH {SS = [S1]}': [prod_1]}); 
break;
case 68:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
					  prod_1 = grammar_stack.pop();
					  prod_2 = grammar_stack.pop();
			 		  grammar_stack.push({'XPATH -> XPATH QUERY {S1.push(S2); SS = S1;}': [prod_2, prod_1]}); 
break;
case 69:
 this.$=[$$[$0]];
			   prod_1 = grammar_stack.pop();
			   grammar_stack.push({'XPATH -> QUERY {SS = [S1]}': [prod_1]}); 
break;
case 70:
 this.$=builder.newDoubleAxis($$[$0], this._$.first_line, this._$.first_column+1);
					   prod_1 = grammar_stack.pop();
			 		   grammar_stack.push({'QUERY -> tk_2bar QUERY SS=builder.newDoubleAxis(Param);': ['token: tk_2bar\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 71:
 this.$=builder.newAxis($$[$0], this._$.first_line, this._$.first_column+1);
					 prod_1 = grammar_stack.pop();
			 		 grammar_stack.push({'QUERY -> tk_bar QUERY {SS=builder.newAxis(Param);}': ['token: tk_bar\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 72:

			var linea = this._$.first_line;
			var columna = this._$.first_column+1;
			this.$=builder.newAxis(builder.newExpression(builder.newValue($$[$0-1], Tipos.ASTERISCO, linea, columna), $$[$0], linea, columna), linea, columna);
		
break;
case 73:

			var linea = this._$.first_line;
			var columna = this._$.first_column+1;
			this.$=builder.newDoubleAxis(builder.newExpression(builder.newValue($$[$0-1], Tipos.ASTERISCO, linea, columna), $$[$0], linea, columna), linea, columna);
		
break;
case 76:
 $$[$0-3].push(builder.newPredicate($$[$0-1], this._$.first_line, this._$.first_column+1)); this.$=$$[$0-3];
									 prod_1 = grammar_stack.pop();
									 prod_2 = grammar_stack.pop();
						 			 grammar_stack.push({'CORCHET -> CORCHET tk_ParA E tk_ParC {S1.push(builder.NewPredicate(Param))}': [prod_2, 'token: tk_ParA\t Lexema: ' + $$[$0-2], prod_1, 'token: tk_ParC\t Lexema: ' + $$[$0]]}); 
break;
case 77:
 this.$=[builder.newPredicate($$[$0-1], this._$.first_line, this._$.first_column+1)];
						 prod_1 = grammar_stack.pop();
						 grammar_stack.push({'CORCHET -> tk_corA E tk_corC {SS=builder.newPredicate(Param)}': ['token: tk_corA\t Lexema: ' + $$[$0-2], prod_1, 'token: tk_corC\t Lexema: ' + $$[$0]]}); 
break;
case 78:
 this.$=$$[$0];
					prod_1 = grammar_stack.pop();
					grammar_stack.push({'CORCHETP -> CORCHET {SS=S1;}': [prod_1]}); 
break;
case 79:
 this.$=null;
			grammar_stack.push({'CORCHETP -> Empty {SS=null}': ['EMPTY'] }); 
break;
case 80:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_MENORIGUAL, this._$.first_line, this._$.first_column+1);
						prod_1 = grammar_stack.pop();
				 		prod_2 = grammar_stack.pop();
					    grammar_stack.push({'E -> E tk_menorigual E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_menorigual\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 81:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_MENOR, this._$.first_line, this._$.first_column+1);
					 prod_1 = grammar_stack.pop();
				 	 prod_2 = grammar_stack.pop();
				 	 grammar_stack.push({'E -> E tk_menor E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_menor\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 82:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_MAYORIGUAL, this._$.first_line, this._$.first_column+1);
						  prod_1 = grammar_stack.pop();
				 		  prod_2 = grammar_stack.pop();
						  grammar_stack.push({'E -> E tk_mayorigual E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_mayorigual\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 83:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_MAYOR, this._$.first_line, this._$.first_column+1);
					 prod_1 = grammar_stack.pop();
				 	 prod_2 = grammar_stack.pop();
				 	 grammar_stack.push({'E -> E tk_mayor E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_mayor\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 84:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.OPERACION_SUMA, this._$.first_line, this._$.first_column+1);
				   prod_1 = grammar_stack.pop();
				   prod_2 = grammar_stack.pop();
				   grammar_stack.push({'E -> E tk_mas E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_mas\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 85:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.OPERACION_RESTA, this._$.first_line, this._$.first_column+1);
					 prod_1 = grammar_stack.pop();
				 	 prod_2 = grammar_stack.pop();
				  	 grammar_stack.push({'E -> E tk_menos E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_menos\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 86:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.OPERACION_MULTIPLICACION, this._$.first_line, this._$.first_column+1);
						 prod_1 = grammar_stack.pop();
				 		 prod_2 = grammar_stack.pop();
				  		 grammar_stack.push({'E -> E tk_asterisco E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_asterisco\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 87:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.OPERACION_DIVISION, this._$.first_line, this._$.first_column+1);
				   prod_1 = grammar_stack.pop();
				   prod_2 = grammar_stack.pop();
				   grammar_stack.push({'E -> E tk_div E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_div\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 88:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.OPERACION_MODULO, this._$.first_line, this._$.first_column+1);
				   prod_1 = grammar_stack.pop();
				   prod_2 = grammar_stack.pop();
				   grammar_stack.push({'E -> E tk_mod E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_mod\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 89:
 this.$=builder.newOperation(builder.newValue(0, Tipos.NUMBER, _$[$0-1].first_line, _$[$0-1].first_column+1), $$[$0], Tipos.OPERACION_RESTA, this.$.first_line, this.$.first_column+1); 
								prod_1 = grammar_stack.pop();
						  		grammar_stack.push({'E -: tk_menos E': ['token: tk_menos\t Lexema: ' + $$[$0-1], prod_1]});
break;
case 90:
 this.$=builder.newOperation(builder.newValue(0, Tipos.NUMBER, _$[$0-1].first_line, _$[$0-1].first_column+1), $$[$0], Tipos.OPERACION_SUMA, this.$.first_line, this.$.first_column+1); 
								prod_1 = grammar_stack.pop();
						  		grammar_stack.push({'E -: tk_mas E': ['token: tk_mas\t Lexema: ' + $$[$0-1], prod_1]});
break;
case 91:
 this.$=$$[$0-1];
						  prod_1 = grammar_stack.pop();
						  grammar_stack.push({'E -> tk_ParA E tk_ParC {SS=S2}': ['token: tk_ParA\t Lexema: ' + $$[$0-2], prod_1, 'token: tk_ParC\t Lexema: ' + $$[$0]]}); 
break;
case 92:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.LOGICA_OR, this._$.first_line, this._$.first_column+1);
				  prod_1 = grammar_stack.pop();
				  prod_2 = grammar_stack.pop();
				  grammar_stack.push({'E -> E tk_or E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_or\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 93:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.LOGICA_AND, this._$.first_line, this._$.first_column+1);
				   prod_1 = grammar_stack.pop();
				   prod_2 = grammar_stack.pop();
				   grammar_stack.push({'E -> E tk_and E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_and\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 94:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_IGUAL, this._$.first_line, this._$.first_column+1); 
					 prod_1 = grammar_stack.pop();
					 prod_2 = grammar_stack.pop();
					 grammar_stack.push({'E -> E tk_equal E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_equal\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 95:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_DIFERENTE, this._$.first_line, this._$.first_column+1); 
						prod_1 = grammar_stack.pop();
						prod_2 = grammar_stack.pop();
						grammar_stack.push({'E -> E tk_diferent E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_diferent\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 97:
 $$[$0-1].push(insert_text(this._$.first_line, this._$.first_column+1)); this.$ = $$[$0-1]; 
break;
case 99:
 this.$=builder.newExpression($$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1);
						prod_1 = grammar_stack.pop();
						prod_2 = grammar_stack.pop();
						grammar_stack.push({'EXP_PR -> FUNC CORCHETP {SS=builder.newExpression(Param)}': [prod_2, prod_1]}); 
break;
case 100:
 this.$=builder.newExpression($$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1); 
								prod_1 = grammar_stack.pop();
								prod_2 = grammar_stack.pop();
								grammar_stack.push({'EXP_PR -> PRIMITIVO CORCHETP {SS=builder.newExpression(Param)}': [prod_2, prod_1]}); 
break;
case 101:
 this.$=insert_current($$[$0-1].variable, $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 102:
 this.$=builder.newNodename($$[$0], this._$.first_line, this._$.first_column+1);
				   grammar_stack.push({'PRIMITIVO -> tk_id {SS=builder.newNodename(Param)}':['token: tk_text\t Lexema: ' + $$[$0]]}); 
break;
case 104:
 this.$=builder.newValue(Number($$[$0]), Tipos.NUMBER, this._$.first_line, this._$.first_column+1);
				grammar_stack.push({'PRIMITIVO -> num {SS=builder.newValue(Param)}':['token: num\t Lexema: ' + $$[$0]]}); 
break;
case 105:
 this.$=builder.newCurrent($$[$0], this._$.first_line, this._$.first_column+1); 
					 grammar_stack.push({'PRIMITIVO -> tk_punto {SS=builder.newCurrent(Param)}':['token: tk_punto\t Lexema: ' + $$[$0]]}); 
break;
case 106:
 this.$=builder.newParent($$[$0], this._$.first_line, this._$.first_column+1);
					   grammar_stack.push({'PRIMITIVO -> tk_2puntos {SS=builder.newParent(Param)}':['token: tk_2puntos\t Lexema: ' + $$[$0]]}); 
break;
case 107:
 this.$=builder.newAttribute($$[$0], this._$.first_line, this._$.first_column+1);
							grammar_stack.push({'PRIMITIVO -> tk_arroba tk_id {SS=builder.newAttribute(Param)}':['token: tk_arroba\t Lexema: ' + $$[$0-1], 'token: tk_id\t Lexema: ' + $$[$0]]}); 
break;
case 108:
 this.$=builder.newAttribute($$[$0], this._$.first_line, this._$.first_column+1); 
							 grammar_stack.push({'PRIMITIVO -> tk_arroba tk_asterisco {SS=builder.newAttribute(Param)}':['token: tk_arroba\t Lexema: ' + $$[$0-1], 'token: tk_asterisco\t Lexema: ' + $$[$0]]});
break;
case 109:
 this.$=builder.newValue($$[$0], Tipos.STRING, this._$.first_line, this._$.first_column+1);
						   grammar_stack.push({'PRIMITIVO -> tk_attribute_d {SS=builder.newValue(Param)}':['token: tk_attribute_d\t Lexema: ' + $$[$0]]}); 
break;
case 110:
 this.$=builder.newValue($$[$0], Tipos.STRING, this._$.first_line, this._$.first_column+1); 
						   grammar_stack.push({'PRIMITIVO -> tk_attribute_s {SS=builder.newValue(Param)}':['token: tk_attribute_s\t Lexema: ' + $$[$0]]}); 
break;
case 111:
 this.$=builder.newValue($$[$0-2], Tipos.FUNCION_TEXT, this._$.first_line, this._$.first_column+1);
								grammar_stack.push({'FUNC -> tk_text tk_ParA tk_ParC {SS=builder.newValue(Param)}':['token: tk_text\t Lexema: ' + $$[$0-2], 'token: tk_ParA\t Lexema: ' + $$[$0-1], 'token: tk_ParC\t Lexema: ' + $$[$0]]}); 
break;
case 112:
 this.$=builder.newValue($$[$0-2], Tipos.FUNCION_LAST, this._$.first_line, this._$.first_column+1);
								grammar_stack.push({'FUNC -> tk_last tk_ParA tk_ParC {SS=builder.newValue(Param)}':['token: tk_last\t Lexema: ' + $$[$0-2], 'token: tk_ParA\t Lexema: ' + $$[$0-1], 'token: tk_ParC\t Lexema: ' + $$[$0]]}); 
break;
case 113:
 this.$=builder.newValue($$[$0-2], Tipos.FUNCION_POSITION, this._$.first_line, this._$.first_column+1); 
									grammar_stack.push({'FUNC -> tk_position tk_ParA tk_ParC {SS=builder.newValue(Param)}':['token: tk_position\t Lexema: ' + $$[$0-2], 'token: tk_ParA\t Lexema: ' + $$[$0-1], 'token: tk_ParC\t Lexema: ' + $$[$0]]});
break;
case 114:
 this.$=builder.newValue($$[$0-2], Tipos.FUNCION_NODE, this._$.first_line, this._$.first_column+1); 
								grammar_stack.push({'FUNC -> tk_node tk_ParA tk_ParC {SS=builder.newValue(Param)}':['token: tk_node\t Lexema: ' + $$[$0-2], 'token: tk_ParA\t Lexema: ' + $$[$0-1], 'token: tk_ParC\t Lexema: ' + $$[$0]]});
break;
case 115:
 this.$=builder.newAxisObject($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1);
								prod_1 = grammar_stack.pop();
								prod_2 = grammar_stack.pop();
								grammar_stack.push({'AXIS -> AXISNAME tk_4puntos QUERY {SS=builder.newAxisObject(Param)}':[prod_2, 'token: tk_4puntos\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 116:
 
		var linea = this._$.first_line;
		var columna = this._$.first_column+1;
		this.$=builder.newAxisObject($$[$0-3], builder.newExpression(builder.newValue($$[$0-1], Tipos.ASTERISCO, linea, columna), $$[$0], linea, columna), linea, columna);
	
break;
case 117:
 this.$ = Tipos.AXIS_ANCESTOR;
						grammar_stack.push({'AXISNAME -> tk_ancestor {SS = Tipos.AxisTipo}':['token: tk_ancestor\t Lexema: ' + $$[$0]]}); 
break;
case 118:
 this.$ = Tipos.AXIS_ANCESTOR_OR_SELF;
						grammar_stack.push({'AXISNAME -> tk_ancestor2 {SS = Tipos.AxisTipo}':['token: tk_ancestor2\t Lexema: ' + $$[$0]]}); 
break;
case 119:
 this.$ = Tipos.AXIS_ATTRIBUTE;
						grammar_stack.push({'AXISNAME -> tk_attribute {SS = Tipos.AxisTipo}':['token: tk_attribute\t Lexema: ' + $$[$0]]}); 
break;
case 120:
 this.$ = Tipos.AXIS_CHILD;
						grammar_stack.push({'AXISNAME -> tk_child {SS = Tipos.AxisTipo}':['token: tk_child\t Lexema: ' + $$[$0]]}); 
break;
case 121:
 this.$ = Tipos.AXIS_DESCENDANT;
						grammar_stack.push({'AXISNAME -> tk_descendant {SS = Tipos.AxisTipo}':['token: tk_descendant\t Lexema: ' + $$[$0]]}); 
break;
case 122:
 this.$ = Tipos.AXIS_DESCENDANT_OR_SELF;
						grammar_stack.push({'AXISNAME -> tk_descendant2 {SS = Tipos.AxisTipo}':['token: tk_descendant2\t Lexema: ' + $$[$0]]}); 
break;
case 123:
 this.$ = Tipos.AXIS_FOLLOWING;
						grammar_stack.push({'AXISNAME -> tk_following {SS = Tipos.AxisTipo}':['token: tk_following\t Lexema: ' + $$[$0]]}); 
break;
case 124:
 this.$ = Tipos.AXIS_FOLLOWING_SIBLING;
						grammar_stack.push({'AXISNAME -> tk_following2 {SS = Tipos.AxisTipo}':['token: tk_follownig2\t Lexema: ' + $$[$0]]}); 
break;
case 125:
 this.$ = Tipos.AXIS_NAMESPACE;
						grammar_stack.push({'AXISNAME -> tk_namespace {SS = Tipos.AxisTipo}':['token: tk_namespace\t Lexema: ' + $$[$0]]}); 
break;
case 126:
 this.$ = Tipos.AXIS_PARENT;
						grammar_stack.push({'AXISNAME -> tk_parent {SS = Tipos.AxisTipo}':['token: tk_parent\t Lexema: ' + $$[$0]]}); 
break;
case 127:
 this.$ = Tipos.AXIS_PRECEDING;
						grammar_stack.push({'AXISNAME -> tk_preceding {SS = Tipos.AxisTipo}':['token: tk_preceding\t Lexema: ' + $$[$0]]}); 
break;
case 128:
 this.$ = Tipos.AXIS_PRECEDING_SIBLING;
						grammar_stack.push({'AXISNAME -> tk_preceding2 {SS = Tipos.AxisTipo}':['token: tk_preceding2\t Lexema: ' + $$[$0]]}); 
break;
case 129:
 this.$ = Tipos.AXIS_SELF;
						grammar_stack.push({'AXISNAME -> tk_self {SS = Tipos.AxisTipo}':['token: tk_self\t Lexema: ' + $$[$0]]}); 
break;
case 130: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142:
 this.$ = Tipos.TIPADO_STRING; 
break;
case 131: case 132:
 this.$ = Tipos.TIPADO_INTEGER; 
break;
case 133:
 this.$ = Tipos.TIPADO_DECIMAL; 
break;
case 134:
 this.$ = Tipos.TIPADO_BOOLEANO; 
break;
case 143:
 this.$ = queryBuilder.nuevoHTML($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 144:
 this.$ = queryBuilder.nuevoHTML($$[$0-6], $$[$0-5], null, $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 145:
 this.$ = queryBuilder.nuevoHTML($$[$0-3], $$[$0-2], null, null, this._$.first_line, this._$.first_column+1); 
break;
case 148:
 this.$ = queryBuilder.nuevoContenido($$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 149:
 this.$ = queryBuilder.nuevaInyeccion($$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 159:
 this.$=null; 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,75:4,7:5,71:6,10:7,11:8,12:9,13:10,14:11,15:12,46:19,16:20,19:$V2,26:$V3,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,52:$Va,58:$Vb,65:$Vc,72:$Vd}),{1:[3]},{5:[1,27],74:[1,28]},{5:[1,29],7:30,10:7,11:8,12:9,13:10,14:11,15:12,16:20,19:$V2,26:$V3,28:$V4,46:19,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,52:$Va,58:$Vb,65:$Vc},o($Ve,[2,67],{76:31,80:34,81:35,98:36,99:37,39:38,110:39,73:45,30:$Vf,66:$Vg,77:$Vh,78:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD,123:$VE,124:$VF}),o($VG,$VH,{8:66,9:$VI}),{30:$Vf,39:38,66:$Vg,73:45,76:68,77:$Vh,78:$Vi,80:34,81:35,98:36,99:37,100:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:39,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD,123:$VE,124:$VF},o($VJ,[2,7]),o($VJ,[2,8]),o($VJ,[2,9]),o($VJ,[2,10]),o($VJ,[2,11]),o($VJ,[2,12]),{20:[1,69]},{39:72,53:70,66:$Vg,67:71},{39:73,66:$Vg},o($V0,$V1,{71:6,46:19,16:20,24:74,21:75,15:76,75:81,14:83,19:$V2,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,86:$VL,89:$VM,90:$VN,97:$VO}),{27:[1,84]},{29:[1,85]},{20:[1,86]},{17:87,23:[1,88]},{20:[2,33]},{20:[2,34]},{20:[2,35]},{20:[2,36]},{20:[2,37]},{20:[1,89]},{1:[2,1]},o($V0,$V1,{71:6,75:90,72:$Vd}),{1:[2,2]},o($VG,$VH,{8:91,9:$VI}),o($VP,[2,68]),{30:$Vf,39:38,44:[1,93],66:$Vg,73:45,76:92,77:$Vh,78:$Vi,80:34,81:35,98:36,99:37,100:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:39,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD,123:$VE,124:$VF},{30:$Vf,39:38,44:[1,95],66:$Vg,73:45,76:94,77:$Vh,78:$Vi,80:34,81:35,98:36,99:37,100:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:39,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD,123:$VE,124:$VF},o($VP,[2,74]),o($VP,[2,75]),o($VP,$VQ,{79:96,82:97,83:$VR}),o($VP,$VQ,{82:97,79:99,83:$VR}),o($VP,$VQ,{82:97,79:100,83:$VR}),{111:[1,101]},{20:[1,102]},{20:[1,103]},{20:[1,104]},{20:[1,105]},o($VS,[2,102]),o($VS,[2,103]),o($VS,[2,104]),o($VS,[2,105]),o($VS,[2,106]),{30:[1,106],44:[1,107]},{30:[1,108]},{111:[2,117]},{111:[2,118]},{111:[2,119]},{111:[2,120]},{111:[2,121]},{111:[2,122]},{111:[2,123]},{111:[2,124]},{111:[2,125]},{111:[2,126]},{111:[2,127]},{111:[2,128]},{111:[2,129]},o($VS,[2,109]),o($VS,[2,110]),o($VG,[2,4]),o($VG,[2,5]),o($VP,[2,69]),{73:109,104:$Vn,105:$Vo},{9:[1,112],11:116,12:111,54:110,55:113,56:114,57:115,58:$Vb,62:$VT,63:$VU,65:$Vc},o($VV,[2,56]),{68:[1,119],69:[1,120]},{59:[1,121]},o($VJ,[2,51]),o($VJ,[2,52],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61}),o($VJ,[2,53]),{9:$V71,22:$V81,30:$V91,94:$Va1,95:$Vb1,101:$Vc1,115:$Vd1,137:135},o($V0,$V1,{71:6,46:19,75:81,14:83,21:143,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:144,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:145,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($Ve1,[2,96],{76:31,80:34,81:35,98:36,99:37,39:38,110:39,73:45,30:$Vf,66:$Vg,77:$Vh,78:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD,123:$VE,124:$VF}),{20:[1,146]},o($Ve1,[2,98]),{28:[1,147]},{30:[1,148]},o($V0,$V1,{71:6,46:19,75:81,14:83,45:149,21:150,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),{18:151,25:[1,152]},o($V0,$V1,{71:6,46:19,75:81,14:83,21:153,24:155,20:[1,154],28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,86:$VL,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:156,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($Ve,[2,66],{76:31,80:34,81:35,98:36,99:37,39:38,110:39,73:45,30:$Vf,66:$Vg,77:$Vh,78:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD,123:$VE,124:$VF}),o($VG,[2,3]),o($VP,[2,70]),o($VP,$VQ,{82:97,79:157,83:$VR}),o($VP,[2,71]),o($VP,$VQ,{82:97,79:158,83:$VR}),o($VP,[2,99]),o($VP,[2,78],{83:[1,159]}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:160,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($VP,[2,100]),o($VP,[2,101]),{30:$Vf,39:38,44:[1,162],66:$Vg,73:45,76:161,77:$Vh,78:$Vi,80:34,81:35,98:36,99:37,100:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:39,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD,123:$VE,124:$VF},{22:[1,163]},{22:[1,164]},{22:[1,165]},{22:[1,166]},o($VS,[2,107]),o($VS,[2,108]),o([5,9,19,22,25,26,28,30,32,36,44,47,48,49,50,51,52,58,59,62,63,65,66,68,69,70,74,77,78,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124],[2,54]),{22:[1,167]},{11:116,12:168,55:169,56:114,57:115,58:$Vb,62:$VT,63:$VU,65:$Vc},o($VJ,[2,39]),{39:72,66:$Vg,67:170},o($Vf1,[2,41]),o($Vf1,[2,42]),o($Vf1,[2,43],{9:[1,171]}),o($Vf1,[2,44]),o($V0,$V1,{71:6,46:19,75:81,14:83,21:172,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),{64:[1,173]},o($V0,$V1,{71:6,46:19,75:81,14:83,60:174,21:176,20:$Vg1,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),{39:177,66:$Vg},o($V0,$V1,{71:6,46:19,75:81,14:83,21:176,60:178,20:$Vg1,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:179,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:180,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:181,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:182,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:183,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:184,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:185,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:186,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:187,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:188,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:189,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:190,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:191,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($Vh1,[2,159],{138:192,30:[1,193]}),o($Vi1,[2,150]),o($Vi1,[2,151]),o($Vi1,[2,152]),o($Vi1,[2,153]),o($Vi1,[2,154]),o($Vi1,[2,155]),o($Vi1,[2,156]),o($Ve1,[2,89]),o($Ve1,[2,90]),{22:$Vj1,44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61},o($V0,$V1,{71:6,75:195,72:$Vd}),{29:[1,196]},{20:[1,197]},{9:$Vk1,22:[1,198]},o($Vl1,[2,65],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61}),o($VJ,[2,13]),o($V0,$V1,{71:6,46:19,16:20,75:81,14:83,21:200,15:202,24:203,19:$V2,20:[1,201],28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,86:$VL,89:$VM,90:$VN,97:$VO}),{25:[2,15],44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61},o($V0,$V1,{71:6,46:19,75:81,14:83,21:145,20:$VK,22:[1,204],28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),{25:[2,17]},{22:[1,205],44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61},o($VP,[2,73]),o($VP,[2,72]),o($V0,$V1,{71:6,46:19,75:81,14:83,21:206,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),{44:$VW,84:[1,207],85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61},o($VP,[2,115]),o($VP,$VQ,{82:97,79:208,83:$VR}),o($VS,[2,111]),o($VS,[2,112]),o($VS,[2,113]),o($VS,[2,114]),o($V0,[2,62]),o($VJ,[2,38]),o($Vf1,[2,40]),o($VV,[2,55]),o($V0,$V1,{71:6,46:19,75:81,14:83,21:209,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($Vf1,[2,48],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:210,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($VV,[2,57]),o($V0,$V1,{71:6,46:19,75:81,14:83,21:211,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($Vm1,[2,61],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61}),{68:[1,212]},o($Vm1,[2,45]),o($Vn1,[2,80],{44:$VW,89:$V$,90:$V01,91:$V11,92:$V21}),o($Vn1,[2,81],{44:$VW,89:$V$,90:$V01,91:$V11,92:$V21}),o($Vn1,[2,82],{44:$VW,89:$V$,90:$V01,91:$V11,92:$V21}),o($Vn1,[2,83],{44:$VW,89:$V$,90:$V01,91:$V11,92:$V21}),o($Vo1,[2,84],{44:$VW,91:$V11,92:$V21}),o($Vo1,[2,85],{44:$VW,91:$V11,92:$V21}),o($Ve1,[2,86]),o($Ve1,[2,87]),o($Ve1,[2,88]),o([5,9,19,22,25,26,28,36,47,48,49,50,51,52,58,62,63,65,70,84,93],[2,92],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,94:$V41,95:$V51,96:$V61}),o([5,9,19,22,25,26,28,36,47,48,49,50,51,52,58,62,63,65,70,84,93,94],[2,93],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,95:$V51,96:$V61}),o($Vn1,[2,94],{44:$VW,89:$V$,90:$V01,91:$V11,92:$V21}),o($Vn1,[2,95],{44:$VW,89:$V$,90:$V01,91:$V11,92:$V21}),{78:[1,214],88:[1,213]},{95:[1,215]},o($Ve1,[2,91]),{22:[1,216],30:$Vf,39:38,66:$Vg,73:45,76:31,77:$Vh,78:$Vi,80:34,81:35,98:36,99:37,100:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:39,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD,123:$VE,124:$VF},{30:[1,217]},o($V0,$V1,{71:6,46:19,75:81,14:83,21:150,45:218,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($Ve1,[2,32]),o($V0,$V1,{71:6,46:19,75:81,14:83,21:219,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($VJ,[2,18],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61}),o($V0,$V1,{71:6,46:19,75:81,14:83,21:145,20:$VK,22:[1,220],28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($VJ,[2,20]),o($VJ,[2,21]),{25:[2,16]},{23:[2,14]},{44:$VW,84:[1,221],85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61},o($VS,[2,77]),o($VP,[2,116]),o($VV,[2,49],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61}),o($VV,[2,50],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61}),{9:[1,223],22:$Vj1,44:$VW,70:[1,222],85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61},o($V0,$V1,{71:6,46:19,75:81,14:83,21:176,60:224,20:$Vg1,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),{9:$V71,22:$V81,30:$V91,34:$Vp1,86:[1,226],94:$Va1,95:$Vb1,101:$Vc1,115:$Vd1,137:228,139:225,140:227},{88:[1,230]},{9:$V71,22:$V81,30:$V91,34:$Vp1,73:231,94:$Va1,95:$Vb1,101:$Vc1,104:$Vn,105:$Vo,115:$Vd1,137:228,139:232,140:227},o($Ve1,[2,97]),{20:[1,233]},{9:$Vk1,22:[1,234]},o($Vl1,[2,64],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61}),o($VJ,[2,19]),o($VS,[2,76]),o($V0,$V1,{71:6,46:19,75:81,14:83,21:235,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($V0,$V1,{71:6,46:19,75:81,14:83,61:236,21:237,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($VV,[2,58]),{9:$V71,22:$V81,30:$V91,34:$Vp1,86:[1,238],94:$Va1,95:$Vb1,101:$Vc1,115:$Vd1,137:228,140:239},{78:[1,240]},o($Vi1,[2,147]),o($Vi1,[2,148]),o($V0,$V1,{71:6,46:19,75:81,14:83,21:241,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),o($Vq1,[2,145]),o($Vh1,[2,157]),o($Vh1,[2,158],{137:228,140:239,9:$V71,22:$V81,30:$V91,34:$Vp1,94:$Va1,95:$Vb1,101:$Vc1,115:$Vd1}),{31:242,38:243,39:244,66:$Vg},o($Ve1,[2,31]),{22:[1,245],44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61},{9:[1,247],22:[1,246]},o($Vl1,[2,47],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61}),{78:[1,248]},o($Vi1,[2,146]),{9:$V71,22:$V81,30:$V91,94:$Va1,95:$Vb1,101:$Vc1,115:$Vd1,137:249},{36:[1,250],44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61},{9:[1,252],22:[1,251]},o($Vl1,[2,24]),{32:[1,253]},o($Vm1,[2,59]),o($Vm1,[2,60]),o($V0,$V1,{71:6,46:19,75:81,14:83,21:254,20:$VK,28:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,72:$Vd,89:$VM,90:$VN,97:$VO}),{9:$V71,22:$V81,30:$V91,94:$Va1,95:$Vb1,101:$Vc1,115:$Vd1,137:255},{88:[1,256]},o($Vi1,[2,149]),{32:[1,257]},{38:258,39:244,66:$Vg},{33:259,40:$Vr1},o($Vl1,[2,46],{44:$VW,85:$VX,86:$VY,87:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,93:$V31,94:$V41,95:$V51,96:$V61}),{88:[1,261]},o($Vq1,[2,144]),{33:262,40:$Vr1},o($Vl1,[2,23]),o($Vl1,[2,25]),{29:[1,263]},o($Vq1,[2,143]),{34:[1,264]},{41:265,49:[1,266],125:[1,267],126:[1,268],127:[1,269],128:[1,270],129:[1,271],130:[1,272],131:[1,273],132:[1,274],133:[1,275],134:[1,276],135:[1,277],136:[1,278]},{6:280,7:5,10:7,11:8,12:9,13:10,14:11,15:12,16:20,19:$V2,26:$V3,28:$V4,35:279,46:19,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,52:$Va,58:$Vb,65:$Vc},o($Vs1,[2,29],{42:281,43:[1,282],44:[1,283]}),o($Vt1,[2,130]),o($Vt1,[2,131]),o($Vt1,[2,132]),o($Vt1,[2,133]),o($Vt1,[2,134]),o($Vt1,[2,135]),o($Vt1,[2,136]),o($Vt1,[2,137]),o($Vt1,[2,138]),o($Vt1,[2,139]),o($Vt1,[2,140]),o($Vt1,[2,141]),o($Vt1,[2,142]),{36:[1,284]},{7:30,10:7,11:8,12:9,13:10,14:11,15:12,16:20,19:$V2,26:$V3,28:$V4,36:[2,30],46:19,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,52:$Va,58:$Vb,65:$Vc},o($Vs1,[2,26]),o($Vs1,[2,27]),o($Vs1,[2,28]),{37:[1,285]},o($VJ,[2,22])],
defaultActions: {21:[2,33],22:[2,34],23:[2,35],24:[2,36],25:[2,37],27:[2,1],29:[2,2],51:[2,117],52:[2,118],53:[2,119],54:[2,120],55:[2,121],56:[2,122],57:[2,123],58:[2,124],59:[2,125],60:[2,126],61:[2,127],62:[2,128],63:[2,129],155:[2,17],204:[2,16],205:[2,14]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var attribute = '';
var errors = [];
let grammar_stack = [];
let re = /[^\n\t\r ]+/g

function getGrammarReport(obj){
        let str = `<!DOCTYPE html>
                     <html lang="en" xmlns="http://www.w3.org/1999/html">
                     <head>
                         <meta charset="UTF-8">
                         <meta
                         content="width=device-width, initial-scale=1, shrink-to-fit=no"
                         name="viewport">
                         <!-- Bootstrap CSS -->
                         <link
                         crossorigin="anonymous"
                         href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
                               integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh"
                               rel="stylesheet">
                         <title>Title</title>
                         <style>
                             table, th, td {
                                 border: 1px solid black;
                             }
                             ul, .ul-tree-view {
                                 list-style-type: none;
                             }

                             #div-table{
                                 width: 1200px;
                                 margin: 100px;
                                 border: 3px solid #73AD21;
                             }

                             .ul-tree-view {
                                 margin: 0;
                                 padding: 0;
                             }

                             .caret {
                                 cursor: pointer;
                                 -webkit-user-select: none; /* Safari 3.1+ */
                                 -moz-user-select: none; /* Firefox 2+ */
                                 -ms-user-select: none; /* IE 10+ */
                                 user-select: none;
                             }

                             .caret::before {
                                 content: "\u25B6";
                                 color: black;
                                 display: inline-block;
                                 margin-right: 6px;
                             }

                             .caret-down::before {
                                 -ms-transform: rotate(90deg); /* IE 9 */
                                 -webkit-transform: rotate(90deg); /* Safari */'
                             transform: rotate(90deg);
                             }

                             .nested {
                                 display: none;
                             }

                             .active {
                                 display: block;
                             }

                             li span:hover {
                                 font-weight: bold;
                                 color : white;
                                 background-color: #dc5b27;
                             }

                             li span:hover + ul li  {
                                 font-weight: bold;
                                 color : white;
                                 background-color: #dc5b27;
                             }

                             .tree-view{
                                 display: inline-block;
                             }

                             li.string {
                                 list-style-type: square;
                             }
                             li.string:hover {
                                 color : white;
                                 background-color: #dc5b27;
                             }
                             .center {
                                margin: auto;
                                width: 50%;
                                border: 3px solid green;
                                padding-left: 15%;
                             }
                         </style>
                     </head>
                     <body>
                     <h1 class="center">Reporte Gramatical</h1>
                     <div class="tree-view">
                     <ul class="ul-tree-view" id="tree-root">`;


        str = str + buildGrammarReport(obj);


        str = str + `
                    </ul>
                    </ul>
                    </div>
                             <br>
                             <br>
                             <br>
                             <br>
                             <br>
                             <br>
                        <button onclick="fun1()">Expand Grammar Tree</button>

                     <div id="div-table">
                     <table style="width:100%">

                     <tr><th>Produccion</th><th>Cuerpo</th><th>Accion</th></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>ini</th><td>XPATH_U EOF</td><td>SS= S1</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>XPATH_U</th><td>XPATH_U tk_line XPATH</td><td>S1.push(S3); SS = S1;</td></tr>
                     <tr><th></th><td>XPATH_U tk_2line XPATH</td><td>S1.push(S3); SS = S1;</td></tr>
                     <tr><th></th><td>XPATH</td><td>SS = [S1]</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>XPATH</th><td>XPATH QUERY</td><td>S1.push(S2); SS = S1;</td></tr>
                     <tr><th></th><td>QUERY</td><td>SS = [S1]</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>QUERY</th><td>tk_2bar QUERY</td><td>SS=builder.newDoubleAxis(Param);</td></tr>
                     <tr><th></th><td>tk_bar QUERY</td><td>SS=builder.newAxis(Param);</td></tr>
                     <tr><th></th><td>EXP_PR</td><td>SS=S1</td></tr>
                     <tr><th></th><td>AXIS</td><td>SS=S1</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>CORCHET</th><td>CORCHET tk_corA E tk_corC</td><td>S1.push(builder.NewPredicate(Param))</td></tr>
                     <tr><th></th><td>tk_corA E tk_corC</td><td>SS=builder.newPredicate(Param)</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>CORCHETP</th><td>CORCHET</td><td>SS=S1</td></tr>
                     <tr><th></th><td>Empty</td><td>SS=null</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>E</th><td>E tk_menorigual E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_menor E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_mayorigual E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_mayor E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_mas E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_menos E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_asterisco E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_div E </td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_mod E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>tk_menos E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>tk_ParA E tk_ParC</td><td>SS=S2</td></tr>
                     <tr><th></th><td>E tk_or E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_and E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_equal E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>E tk_diferent E</td><td>SS=builder.newOperation(Param)</td></tr>
                     <tr><th></th><td>QUERY</td><td>SS=S1</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>EXP_PR</th><td>FUNC CORCHETP</td><td>SS=builder.newExpression(Param)</td></tr>
                     <tr><th></th><td>PRIMITIVO CORCHETEP</td><td>SS=builder.newExpression(Param)</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>PRIMITIVO</th><td>tk_id</td><td>SS=builder.newNodename(Param)</td></tr>
                     <tr><th></th><td>tk_attribute_d</td><td>SS=builder.newValue(Param)</td></tr>
                     <tr><th></th><td>tk_attribute_s</td><td>SS=builder.newValue(Param)</td></tr>
                     <tr><th></th><td>num</td><td>SS=builder.newValue(Param)</td></tr>
                     <tr><th></th><td>tk_asterisco</td><td>SS=builder.newValue(Param)</td></tr>
                     <tr><th></th><td>tk_punto</td><td>SS=builder.newCurrent(Param)</td></tr>
                     <tr><th></th><td>tk_2puntos</td><td>SS=builder.newParent(Param)</td></tr>
                     <tr><th></th><td>tk_arroba tk_id</td><td>SS=builder.newAttribute(Param)</td></tr>
                     <tr><th></th><td>tk_arroba tk_asterisco</td><td>SS=builder.newAttribute(Param)</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>FUNC</th><td>tk_text tk_ParA tk_tk_ParC</td><td>SS=builder.newValue(Param)</td></tr>
                     <tr><th></th><td>tk_last tk_ParA tk_ParC</td><td>SS=builder.newValue(Param)</td></tr>
                     <tr><th></th><td>tk_position tk_ParA tk_ParC</td><td>SS=builder.newValue(Param)</td></tr>
                     <tr><th></th><td>tk_node tk_ParA tk_ParC</td><td>SS=builder.newValue(Param)</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>AXIS</th><td>AXISNAME tk_4puntos QUERY</td><td>SS=builder.newAxisObject(Param)</td></tr>
                     <tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr>
                     <tr><th>AXISNAME</th><td>tk_ancestor</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_ancestor2</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_attribute</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_child</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_descendant</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_descendant2</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_following</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_following2</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_namespace</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_parent</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_preceding</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_preceding2</td><td>SS = Tipos.'AxisTipo'</td></tr>
                     <tr><th></th><td>tk_self</td><td>SS = Tipos.'AxisTipo'</td></tr>

                         </table>
                     </div>

                     <script
                     src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.js">
                     </script>
                     <script
                     crossorigin="anonymous" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
                             src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js">
                             </script>
                     <script
                     crossorigin="anonymous" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
                             src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js">
                             </script>

                             <script>
                                 var toggler = document.getElementsByClassName("caret");
                                 var i;

                                 for (i = 0; i < toggler.length; i++) {
                                     toggler[i].addEventListener("click", function() {
                                         this.parentElement
                                         .querySelector(".nested")
                                         .classList.toggle("active");
                                         this.classList.toggle("caret-down");
                                     });
                                 }


                                        function fun1() {
                                            if ($("#tree-root").length > 0) {

                                                $("#tree-root").find("li").each
                                                (
                                                    function () {
                                                        var $span = $("<span></span>");
                                                        //$(this).toggleClass("expanded");
                                                        if ($(this).find("ul:first").length > 0) {
                                                            $span.removeAttr("class");
                                                            $span.attr("class", "expanded");
                                                            $(this).find("ul:first").css("display", "block");
                                                            $(this).append($span);
                                                        }

                                                    }
                                                )
                                            }

                                        }

                             </script>

                     </body>
                     </html>`;
                     return str;
    }
    function buildGrammarReport(obj){
        if(obj == null){return "";}
        let str = "";
        if(Array.isArray(obj)){ //IS ARRAY
            obj.forEach((value)=>{
            if(typeof value === 'string' ){
                str = str + `<li class= "string">
                ${value}
                </li>
                `;
            }else if(Array.isArray(value)){console.log("ERROR 5: Arreglo de arreglos");}else{
                for(let key in value){
                    str = str + buildGrammarReport(value);
                }
            }
            });
        }else if(typeof obj === 'string' ){ // IS STRING
            return "";
        }else{// IS OBJECT
            for(let key in obj){

                str = `<li class="grammar-tree"><span class="caret">
                ${key}
                </span>
                <ul class="nested">
                `;
                str = str + buildGrammarReport(obj[key]);
                str = str + `
                </ul>
                </li>`;
            }
        }
        return str;
    }

    function getCST(obj){
        let str = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport">
            <!-- Bootstrap CSS -->
            <link crossorigin="anonymous" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
                  integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" rel="stylesheet">
            <title>Title</title>
            <style>

                #divheight{
                    height: 400px;
                    width: 1050px;
                }

                .nav-tabs > li .close {
                    margin: -2px 0 0 10px;
                    font-size: 18px;
                }

                .nav-tabs2 > li .close {
                    margin: -2px 0 0 10px;
                    font-size: 18px;
                }

            </style>

            <style>
                body {
                    font-family: sans-serif;
                    font-size: 15px;
                }

                .tree ul {
                    position: relative;
                    padding: 1em 0;
                    white-space: nowrap;
                    margin: 0 auto;
                    text-align: center;
                }
                .tree ul::after {
                    content: "";
                    display: table;
                    clear: both;
                }

                .tree li {
                    display: inline-block;
                    vertical-align: top;
                    text-align: center;
                    list-style-type: none;
                    position: relative;
                    padding: 1em 0.5em 0 0.5em;
                }
                .tree li::before, .tree li::after {
                    content: "";
                    position: absolute;
                    top: 0;
                    right: 50%;
                    border-top: 1px solid #ccc;
                    width: 50%;
                    height: 1em;
                }
                .tree li::after {
                    right: auto;
                    left: 50%;
                    border-left: 1px solid #ccc;
                }
                /*
                ul:hover::after  {
                    transform: scale(1.5); /* (150% zoom - Note: if the zoom is too large, it will go outside of the viewport)
                }*/

                .tree li:only-child::after, .tree li:only-child::before {
                    display: none;
                }
                .tree li:only-child {
                    padding-top: 0;
                }
                .tree li:first-child::before, .tree li:last-child::after {
                    border: 0 none;
                }
                .tree li:last-child::before {
                    border-right: 1px solid #ccc;
                    border-radius: 0 5px 0 0;
                }
                .tree li:first-child::after {
                    border-radius: 5px 0 0 0;
                }

                .tree ul ul::before {
                    content: "";
                    position: absolute;
                    top: 0;
                    left: 50%;
                    border-left: 1px solid #ccc;
                    width: 0;
                    height: 1em;
                }

                .tree li a {
                    border: 1px solid #ccc;
                    padding: 0.5em 0.75em;
                    text-decoration: none;
                    display: inline-block;
                    border-radius: 5px;
                    color: #333;
                    position: relative;
                    top: 1px;
                }

                .tree li a:hover,
                .tree li a:hover + ul li a {
                    background: #e9453f;
                    color: #fff;
                    border: 1px solid #e9453f;
                }

                .tree li a:hover + ul li::after,
                .tree li a:hover + ul li::before,
                .tree li a:hover + ul::before,
                .tree li a:hover + ul ul::before {
                    border-color: #e9453f;
                }

            </style>
        </head>
        <body>

        <div class="tree">
            <ul id="tree-list">

            <!--AQUI-->
        `;
        str = str + buildCSTTree(obj);
        str = str + `
        </ul>
        </div>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.js"></script>
        <script crossorigin="anonymous" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
                src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
        <script crossorigin="anonymous" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
                src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
        </body>
        </html>
        `;
        return str;
    }

    function buildCSTTree(obj){
        if(obj == null){return "";}
        let str = "";
        if(Array.isArray(obj)){ //IS ARRAY
            obj.forEach((value)=>{
            if(typeof value === 'string' ){
                let words = value.split('Lexema:');
                if(words.length == 2){
                    let lex = words[1];     //TODO check not go out of bounds
                    let token = words[0];
                    str = str + `<li><a href="">${token}</a><ul>
                    <li><a href="">${lex}
                    </a></li>
                    </ul></li>
                    `;
                }else{
                    str = str + `<li><a href="">${value}</a></li>
                    `;
                }

            }else if(Array.isArray(value)){console.log("ERROR 5: Arreglo de arreglos");}else{
                for(let key in value){
                    str = str + buildCSTTree(value);
                }
            }
            });
        }else if(typeof obj === 'string' ){ // IS STRING
            return "";
        }else{// IS OBJECT
            for(let key in obj){
                const words = key.split('->');
                //console.log(words[3]);
                str = `<li><a href="">${words[0]}</a>
                <ul>
                `;
                str = str + buildCSTTree(obj[key]) + `
                </ul>
                </li>`;
            }
        }
        return str;
    }

	const { Objeto } = require('../model/xpath/Objeto');
	const { Tipos } = require('../model/xpath/Enum');
    const { XQObjeto } = require('../model/xquery/XQObjeto');
    var builder = new Objeto();
    var queryBuilder = new XQObjeto();
    const getASTTree = require('./ast_xpath');

	function insert_current(_variable, _predicate, _linea, _columna) {
		return builder.newAxis(builder.newExpression(builder.newCurrent(_variable, _linea, _columna), _predicate, _linea, _columna), _linea, _columna);
	}
	function insert_text(_linea, _columna) {
		return builder.newDoubleAxis(builder.newExpression(builder.newValue("text()", Tipos.FUNCION_TEXT, _linea, _columna), null, _linea, _columna), _linea, _columna);
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Whitespace
break;
case 1:// XQUERYComment
break;
case 2:// MultiLineComment
break;
case 3:return 100
break;
case 4:return 47
break;
case 5:return 48
break;
case 6:return 50
break;
case 7:return 51
break;
case 8:return 58
break;
case 9:return 85
break;
case 10:return 87
break;
case 11:return 86
break;
case 12:return 88
break;
case 13:return 77
break;
case 14:return 78
break;
case 15:return 59
break;
case 16:return 95
break;
case 17:return 102
break;
case 18:return 101
break;
case 19:return 111
break;
case 20:return 103
break;
case 21:return 66
break;
case 22:return 83
break;
case 23:return 84
break;
case 24:return 20
break;
case 25:return 22
break;
case 26:return 34
break;
case 27:return 36
break;
case 28:return 44
break;
case 29:return 91
break;
case 30:return 113
break;
case 31:return 112
break;
case 32:return 114
break;
case 33:return 115
break;
case 34:return 117
break;
case 35:return 116
break;
case 36:return 119
break;
case 37:return 118
break;
case 38:return 120
break;
case 39:return 121
break;
case 40:return 123
break;
case 41:return 122
break;
case 42:return 124
break;
case 43:return 109
break;
case 44:return 107
break;
case 45:return 106
break;
case 46:return 108
break;
case 47:return 74
break;
case 48:return 89
break;
case 49:return 90
break;
case 50:return 96
break;
case 51:return 93
break;
case 52:return 94
break;
case 53:return 92
break;
case 54:return 72
break;
case 55:return 52
break;
case 56:return 69
break;
case 57:return 68
break;
case 58:return 62
break;
case 59:return 63
break;
case 60:return 64
break;
case 61:return 65
break;
case 62:return 70
break;
case 63:return 9
break;
case 64:return 97
break;
case 65:return 19
break;
case 66:return 23
break;
case 67:return 25
break;
case 68:return 26
break;
case 69:return 27
break;
case 70:return 28
break;
case 71:return 32
break;
case 72:return 40
break;
case 73:return 29
break;
case 74:return 37
break;
case 75:return 43
break;
case 76:return 49
break;
case 77:return 129
break;
case 78:return 130
break;
case 79:return 131
break;
case 80:return 132
break;
case 81:return 133
break;
case 82:return 134
break;
case 83:return 125
break;
case 84:return 126
break;
case 85:return 127
break;
case 86:return 128
break;
case 87:return 'tk_true'
break;
case 88:return 'tk_false'
break;
case 89:return 135
break;
case 90:return 136
break;
case 91: attribute = ''; this.begin("string_doubleq"); 
break;
case 92: attribute += yy_.yytext; 
break;
case 93: attribute += "\""; 
break;
case 94: attribute += "\n"; 
break;
case 95: attribute += " ";  
break;
case 96: attribute += "\t"; 
break;
case 97: attribute += "\\"; 
break;
case 98: attribute += "\'"; 
break;
case 99: attribute += "\r"; 
break;
case 100: yy_.yytext = attribute; this.popState(); return 104; 
break;
case 101: attribute = ''; this.begin("string_singleq"); 
break;
case 102: attribute += yy_.yytext; 
break;
case 103: attribute += "\""; 
break;
case 104: attribute += "\n"; 
break;
case 105: attribute += " ";  
break;
case 106: attribute += "\t"; 
break;
case 107: attribute += "\\"; 
break;
case 108: attribute += "\'"; 
break;
case 109: attribute += "\r"; 
break;
case 110: yy_.yytext = attribute; this.popState(); return 105; 
break;
case 111:return 30
break;
case 112:return 5
break;
case 113: errors.push({ tipo: "Léxico", error: yy_.yytext, origen: "XQuery", linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\(:[\s\S\n]*?:\))/i,/^(?:<!--[\s\S\n]*?-->)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:upper-case\b)/i,/^(?:lower-case\b)/i,/^(?:number\b)/i,/^(?:substring\b)/i,/^(?:let\b)/i,/^(?:(<=|le))/i,/^(?:(>=|ge))/i,/^(?:(<|lt))/i,/^(?:(>|gt))/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?::=)/i,/^(?:(=|eq))/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:::)/i,/^(?:@)/i,/^(?:\$)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:node\b)/i,/^(?:last\b)/i,/^(?:text\b)/i,/^(?:position\b)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:(!=|ne))/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:doc\b)/i,/^(?:for\b)/i,/^(?:at\b)/i,/^(?:in\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:return\b)/i,/^(?:to\b)/i,/^(?:,)/i,/^(?:data\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:\?)/i,/^(?:string\b)/i,/^(?:normalizedString\b)/i,/^(?:token\b)/i,/^(?:date\b)/i,/^(?:dateTime\b)/i,/^(?:duration\b)/i,/^(?:time\b)/i,/^(?:integer\b)/i,/^(?:int\b)/i,/^(?:decimal\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:hexBinary\b)/i,/^(?:anyURI\b)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:['])/i,/^(?:[^'\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:['])/i,/^(?:[\w\u00e1\u00e9\u00ed\u00f3\u00fa\u00c1\u00c9\u00cd\u00d3\u00da\u00f1\u00d1]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string_singleq":{"rules":[102,103,104,105,106,107,108,109,110],"inclusive":false},"string_doubleq":{"rules":[92,93,94,95,96,97,98,99,100],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,101,111,112,113],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xquery;
exports.Parser = xquery.Parser;
exports.parse = function () { return xquery.parse.apply(xquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}