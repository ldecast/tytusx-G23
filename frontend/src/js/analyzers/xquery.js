/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,32],$V1=[1,12],$V2=[1,8],$V3=[1,10],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,54],$Va=[1,40],$Vb=[1,11],$Vc=[1,36],$Vd=[1,35],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,55],$Vi=[1,56],$Vj=[1,28],$Vk=[1,29],$Vl=[1,30],$Vm=[1,31],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,49],$Vw=[1,50],$Vx=[1,51],$Vy=[1,52],$Vz=[1,53],$VA=[5,55],$VB=[5,12,15,17,23,28,31,34,36],$VC=[5,8,12,13,15,17,23,26,28,31,33,34,36,38,45,51,55,57,68,76,77,78,79,80,81,82,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100],$VD=[1,65],$VE=[5,7,8,10,12,13,15,17,23,26,28,31,33,34,36,38,44,45,51,53,55,57,62,64,65,66,67,68,69,70,71,72,73,76,77,78,79,80,81,82,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100],$VF=[2,62],$VG=[1,68],$VH=[1,77],$VI=[1,76],$VJ=[1,83],$VK=[5,7,8,10,12,13,15,17,23,26,28,31,33,34,36,38,44,45,51,53,55,57,61,62,64,65,66,67,68,69,70,71,72,73,76,77,78,79,80,81,82,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100],$VL=[1,93],$VM=[2,50],$VN=[1,99],$VO=[5,12,15,17,23,26,28,31,33,34,36],$VP=[1,110],$VQ=[1,112],$VR=[1,120],$VS=[1,109],$VT=[1,111],$VU=[1,113],$VV=[1,114],$VW=[1,115],$VX=[1,116],$VY=[1,117],$VZ=[1,118],$V_=[1,119],$V$=[1,121],$V01=[5,7,10,12,15,17,23,28,31,33,34,36,44,45,53,62,64,65,66,67,68,69,70,71,72,73],$V11=[5,7,12,15,17,23,28,31,34,36],$V21=[1,126],$V31=[5,12,15,17,23,28,31,33,34,36],$V41=[1,138],$V51=[10,13],$V61=[1,163],$V71=[1,162],$V81=[5,7,10,12,15,17,23,28,31,33,34,36,44,45,53,62,64,65,71,72,73],$V91=[5,7,10,12,15,17,23,28,31,33,34,36,44,45,53,62,64,65,66,67,71,72,73],$Va1=[7,10,11,13,51],$Vb1=[33,45],$Vc1=[5,7,10,11,12,13,15,17,23,28,31,34,36,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"XPATH_U":4,"EOF":5,"XQUERY":6,"tk_menor":7,"tk_id":8,"ATTRIBUTE_LIST":9,"tk_mayor":10,"tk_labre":11,"tk_lcierra":12,"tk_bar":13,"INSTR_QUERY":14,"IF_ELSE_IF":15,"FLWOR":16,"FUNCIONES":17,"FOR_LOOP":18,"LET_CLAUSE":19,"WHERE_CONDITION":20,"ORDER_BY":21,"RETURN_STATEMENT":22,"tk_for":23,"DECLARACION":24,"INSTR_FOR":25,"INSTRUCCIONES_FOR":26,"INSTR_FOR_P":27,"tk_let":28,"VARIABLE":29,"tk_2puntos_igual":30,"tk_where":31,"E":32,"tk_coma":33,"tk_order":34,"tk_by":35,"tk_return":36,"EXP_HTML":37,"tk_dolar":38,"DECLARACIONP":39,"tk_in":40,"DECLARACIONPP":41,"tk_at":42,"tk_ParA":43,"tk_to":44,"tk_ParC":45,"VALORES_COMA":46,"XPATH":47,"HTML":48,"CONTENT_LL":49,"CONTENT_TAG":50,"tk_content":51,"tk_data":52,"tk_equal":53,"STRING":54,"tk_line":55,"QUERY":56,"tk_2bar":57,"EXP_PR":58,"AXIS":59,"CORCHET":60,"tk_corA":61,"tk_corC":62,"CORCHETP":63,"tk_menorigual":64,"tk_mayorigual":65,"tk_mas":66,"tk_menos":67,"tk_asterisco":68,"tk_div":69,"tk_mod":70,"tk_or":71,"tk_and":72,"tk_diferent":73,"FUNC":74,"PRIMITIVO":75,"num":76,"tk_punto":77,"tk_2puntos":78,"tk_arroba":79,"tk_string_d":80,"tk_string_s":81,"tk_text":82,"tk_last":83,"tk_position":84,"tk_node":85,"AXISNAME":86,"tk_4puntos":87,"tk_ancestor":88,"tk_ancestor2":89,"tk_attribute":90,"tk_child":91,"tk_descendant":92,"tk_descendant2":93,"tk_following":94,"tk_following2":95,"tk_namespace":96,"tk_parent":97,"tk_preceding":98,"tk_preceding2":99,"tk_self":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_menor",8:"tk_id",10:"tk_mayor",11:"tk_labre",12:"tk_lcierra",13:"tk_bar",15:"IF_ELSE_IF",17:"FUNCIONES",23:"tk_for",26:"INSTRUCCIONES_FOR",28:"tk_let",30:"tk_2puntos_igual",31:"tk_where",33:"tk_coma",34:"tk_order",35:"tk_by",36:"tk_return",38:"tk_dolar",40:"tk_in",42:"tk_at",43:"tk_ParA",44:"tk_to",45:"tk_ParC",51:"tk_content",52:"tk_data",53:"tk_equal",55:"tk_line",57:"tk_2bar",61:"tk_corA",62:"tk_corC",64:"tk_menorigual",65:"tk_mayorigual",66:"tk_mas",67:"tk_menos",68:"tk_asterisco",69:"tk_div",70:"tk_mod",71:"tk_or",72:"tk_and",73:"tk_diferent",76:"num",77:"tk_punto",78:"tk_2puntos",79:"tk_arroba",80:"tk_string_d",81:"tk_string_s",82:"tk_text",83:"tk_last",84:"tk_position",85:"tk_node",87:"tk_4puntos",88:"tk_ancestor",89:"tk_ancestor2",90:"tk_attribute",91:"tk_child",92:"tk_descendant",93:"tk_descendant2",94:"tk_following",95:"tk_following2",96:"tk_namespace",97:"tk_parent",98:"tk_preceding",99:"tk_preceding2",100:"tk_self"},
productions_: [0,[3,2],[3,2],[3,12],[6,2],[6,1],[14,1],[14,1],[14,1],[16,1],[16,1],[16,1],[16,1],[16,1],[18,3],[25,2],[25,1],[27,1],[27,1],[27,1],[27,1],[19,4],[20,2],[21,3],[21,3],[22,2],[22,2],[29,2],[24,3],[24,1],[39,3],[39,5],[41,5],[41,3],[41,1],[46,3],[46,1],[37,2],[37,1],[48,9],[48,8],[48,5],[49,2],[49,1],[49,1],[50,1],[50,3],[50,6],[9,3],[9,3],[9,0],[4,3],[4,1],[47,2],[47,1],[56,2],[56,2],[56,1],[56,1],[60,4],[60,3],[63,1],[63,0],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[58,2],[58,2],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,2],[75,2],[75,1],[54,1],[54,1],[74,3],[74,3],[74,3],[74,3],[59,3],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   prod_1 = grammar_stack.pop();
					prod_2 = grammar_stack.pop();
			 		grammar_stack.push({'ini -> XPATH_U EOF': [prod_2, prod_1]});
					// grammar_report =  getGrammarReport(grammar_stack); // cst = getCST(grammar_stack); // let arbol_ast = getASTTree($$[$0-1]);
					ast = { ast: $$[$0-1], errors: errors, cst: "cst", grammar_report: "grammar_report",  arbolAST : "arbol_ast" }; return ast;
                
break;
case 2:
 ast = { ast: $$[$0-1], errors: errors, cst: "cst", grammar_report: "grammar_report",  arbolAST : "arbol_ast" }; return ast; 
break;
case 3:
 ast = { ast: $$[$0-11], errors: errors, cst: "cst", grammar_report: "grammar_report",  arbolAST : "arbol_ast" }; return ast; 
break;
case 4: case 15: case 37: case 42:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 5: case 16: case 24: case 36: case 38: case 43:
 this.$=[$$[$0]]; 
break;
case 7: case 17: case 34: case 48: case 49: case 78:
 this.$=$$[$0]; 
break;
case 9: case 10: case 11: case 13: case 18: case 20: case 82: case 83:
 this.$ = $$[$0]; 
break;
case 12: case 19:
 this.$ = queryBuilder.nuevoOrderBy($$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 14:
 this.$ = queryBuilder.nuevoFor($$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 21:
 this.$ = queryBuilder.nuevoLet($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 22:
 this.$ = queryBuilder.nuevoWhere($$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 23: case 28: case 35:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 25: case 26:
 this.$ = queryBuilder.nuevoReturn($$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 27:
 this.$=builder.newNodename("$"+$$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 29:
 this.$=[$$[$0]] 
break;
case 30:
 this.$ = queryBuilder.nuevaDeclaracion($$[$0-2], null, $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 31:
 this.$ = queryBuilder.nuevaDeclaracion($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 32:
 this.$ = queryBuilder.nuevoIntervalo($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 33:
 this.$ = queryBuilder.nuevosValores($$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 39:
 this.$ = queryBuilder.nuevoHTML($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 40:
 this.$ = queryBuilder.nuevoHTML($$[$0-6], $$[$0-5], null, $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 41:
 this.$ = queryBuilder.nuevoHTML($$[$0-3], $$[$0-2], null, null, this._$.first_line, this._$.first_column+1); 
break;
case 45:
 this.$ = queryBuilder.nuevoContenido($$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 46:
 this.$ = queryBuilder.nuevaInyeccion($$[$0-1], false, this._$.first_line, this._$.first_column+1); 
break;
case 47:
 this.$ = queryBuilder.nuevaInyeccion($$[$0-2], true, this._$.first_line, this._$.first_column+1); 
break;
case 50:
 this.$=null; 
break;
case 51:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2];
								 prod_1 = grammar_stack.pop();
								 prod_2 = grammar_stack.pop();
			 					 grammar_stack.push({'XPATH_U -> XPATH_U tk_line XPATH {S1.push(S3); SS = S1;}': [prod_2, 'token: tk_line\t Lexema: ' + $$[$0-2], prod_1]}); 
break;
case 52:
 this.$=[$$[$0]];
				  prod_1 = grammar_stack.pop();
			 	  grammar_stack.push({'XPATH_U -> XPATH {SS = [S1]}': [prod_1]}); 
break;
case 53:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
					  prod_1 = grammar_stack.pop();
					  prod_2 = grammar_stack.pop();
			 		  grammar_stack.push({'XPATH -> XPATH QUERY {S1.push(S2); SS = S1;}': [prod_2, prod_1]}); 
break;
case 54:
 this.$=[$$[$0]];
			   prod_1 = grammar_stack.pop();
			   grammar_stack.push({'XPATH -> QUERY {SS = [S1]}': [prod_1]}); 
break;
case 55:
 this.$=builder.newDoubleAxis($$[$0], this._$.first_line, this._$.first_column+1);
					   prod_1 = grammar_stack.pop();
			 		   grammar_stack.push({'QUERY -> tk_2bar QUERY SS=builder.newDoubleAxis(Param);': ['token: tk_2bar\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 56:
 this.$=builder.newAxis($$[$0], this._$.first_line, this._$.first_column+1);
					 prod_1 = grammar_stack.pop();
			 		 grammar_stack.push({'QUERY -> tk_bar QUERY {SS=builder.newAxis(Param);}': ['token: tk_bar\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 57:
 this.$=$$[$0];
			   prod_1 = grammar_stack.pop();
			   grammar_stack.push({'QUERY -> EXP_PR {SS=S1}': [prod_1]}); 
break;
case 58:
 this.$=$$[$0];
			 prod_1 = grammar_stack.pop();
			 grammar_stack.push({'QUERY -> AXIS {SS=S1}': [prod_1]}); 
break;
case 59:
 $$[$0-3].push(builder.newPredicate($$[$0-1], this._$.first_line, this._$.first_column+1)); this.$=$$[$0-3];
									 prod_1 = grammar_stack.pop();
									 prod_2 = grammar_stack.pop();
						 			 grammar_stack.push({'CORCHET -> CORCHET tk_ParA E tk_ParC {S1.push(builder.NewPredicate(Param))}': [prod_2, 'token: tk_ParA\t Lexema: ' + $$[$0-2], prod_1, 'token: tk_ParC\t Lexema: ' + $$[$0]]}); 
break;
case 60:
 this.$=[builder.newPredicate($$[$0-1], this._$.first_line, this._$.first_column+1)];
						 prod_1 = grammar_stack.pop();
						 grammar_stack.push({'CORCHET -> tk_corA E tk_corC {SS=builder.newPredicate(Param)}': ['token: tk_corA\t Lexema: ' + $$[$0-2], prod_1, 'token: tk_corC\t Lexema: ' + $$[$0]]}); 
break;
case 61:
 this.$=$$[$0];
					prod_1 = grammar_stack.pop();
					grammar_stack.push({'CORCHETP -> CORCHET {SS=S1;}': [prod_1]}); 
break;
case 62:
 this.$=null;
			grammar_stack.push({'CORCHETP -> Empty {SS=null}': ['EMPTY'] }); 
break;
case 63:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_MENORIGUAL, this._$.first_line, this._$.first_column+1);
						prod_1 = grammar_stack.pop();
				 		prod_2 = grammar_stack.pop();
					    grammar_stack.push({'E -> E tk_menorigual E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_menorigual\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 64:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_MENOR, this._$.first_line, this._$.first_column+1);
					 prod_1 = grammar_stack.pop();
				 	 prod_2 = grammar_stack.pop();
				 	 grammar_stack.push({'E -> E tk_menor E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_menor\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 65:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_MAYORIGUAL, this._$.first_line, this._$.first_column+1);
						  prod_1 = grammar_stack.pop();
				 		  prod_2 = grammar_stack.pop();
						  grammar_stack.push({'E -> E tk_mayorigual E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_mayorigual\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 66:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_MAYOR, this._$.first_line, this._$.first_column+1);
					 prod_1 = grammar_stack.pop();
				 	 prod_2 = grammar_stack.pop();
				 	 grammar_stack.push({'E -> E tk_mayor E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_mayor\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 67:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.OPERACION_SUMA, this._$.first_line, this._$.first_column+1);
				   prod_1 = grammar_stack.pop();
				   prod_2 = grammar_stack.pop();
				   grammar_stack.push({'E -> E tk_mas E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_mas\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 68:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.OPERACION_RESTA, this._$.first_line, this._$.first_column+1);
					 prod_1 = grammar_stack.pop();
				 	 prod_2 = grammar_stack.pop();
				  	 grammar_stack.push({'E -> E tk_menos E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_menos\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 69:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.OPERACION_MULTIPLICACION, this._$.first_line, this._$.first_column+1);
						 prod_1 = grammar_stack.pop();
				 		 prod_2 = grammar_stack.pop();
				  		 grammar_stack.push({'E -> E tk_asterisco E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_asterisco\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 70:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.OPERACION_DIVISION, this._$.first_line, this._$.first_column+1);
				   prod_1 = grammar_stack.pop();
				   prod_2 = grammar_stack.pop();
				   grammar_stack.push({'E -> E tk_div E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_div\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 71:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.OPERACION_MODULO, this._$.first_line, this._$.first_column+1);
				   prod_1 = grammar_stack.pop();
				   prod_2 = grammar_stack.pop();
				   grammar_stack.push({'E -> E tk_mod E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_mod\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 72:
 this.$=builder.newOperation(builder.newValue(0, Tipos.NUMBER, this.$.first_line, this.$.first_column+1), $$[$0], Tipos.OPERACION_RESTA, this.$.first_line, this.$.first_column+1); 
								prod_1 = grammar_stack.pop();
						  		grammar_stack.push({'E -: tk_menos E': ['token: tk_menos\t Lexema: ' + $$[$0-1], prod_1]});
break;
case 73:
 this.$=$$[$0-1];
						  prod_1 = grammar_stack.pop();
						  grammar_stack.push({'E -> tk_ParA E tk_ParC {SS=S2}': ['token: tk_ParA\t Lexema: ' + $$[$0-2], prod_1, 'token: tk_ParC\t Lexema: ' + $$[$0]]}); 
break;
case 74:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.LOGICA_OR, this._$.first_line, this._$.first_column+1);
				  prod_1 = grammar_stack.pop();
				  prod_2 = grammar_stack.pop();
				  grammar_stack.push({'E -> E tk_or E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_or\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 75:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.LOGICA_AND, this._$.first_line, this._$.first_column+1);
				   prod_1 = grammar_stack.pop();
				   prod_2 = grammar_stack.pop();
				   grammar_stack.push({'E -> E tk_and E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_and\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 76:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_IGUAL, this._$.first_line, this._$.first_column+1); 
					 prod_1 = grammar_stack.pop();
					 prod_2 = grammar_stack.pop();
					 grammar_stack.push({'E -> E tk_equal E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_equal\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 77:
 this.$=builder.newOperation($$[$0-2], $$[$0], Tipos.RELACIONAL_DIFERENTE, this._$.first_line, this._$.first_column+1); 
						prod_1 = grammar_stack.pop();
						prod_2 = grammar_stack.pop();
						grammar_stack.push({'E -> E tk_diferent E {SS=builder.newOperation(Param)}': [prod_2, 'token: tk_diferent\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 79:
 this.$=builder.newExpression($$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1);
						prod_1 = grammar_stack.pop();
						prod_2 = grammar_stack.pop();
						grammar_stack.push({'EXP_PR -> FUNC CORCHETP {SS=builder.newExpression(Param)}': [prod_2, prod_1]}); 
break;
case 80:
 this.$=builder.newExpression($$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1); 
								prod_1 = grammar_stack.pop();
								prod_2 = grammar_stack.pop();
								grammar_stack.push({'EXP_PR -> PRIMITIVO CORCHETP {SS=builder.newExpression(Param)}': [prod_2, prod_1]}); 
break;
case 81:
 this.$=builder.newNodename($$[$0], this._$.first_line, this._$.first_column+1);
				   grammar_stack.push({'PRIMITIVO -> tk_id {SS=builder.newNodename(Param)}':['token: tk_text\t Lexema: ' + $$[$0]]}); 
break;
case 84:
 this.$=builder.newValue(Number($$[$0]), Tipos.NUMBER, this._$.first_line, this._$.first_column+1);
				grammar_stack.push({'PRIMITIVO -> num {SS=builder.newValue(Param)}':['token: num\t Lexema: ' + $$[$0]]}); 
break;
case 85:
 this.$=builder.newValue($$[$0], Tipos.ASTERISCO, this._$.first_line, this._$.first_column+1);
				   grammar_stack.push({'PRIMITIVO -> tk_asterisco {SS=builder.newValue(Param)}':['token: tk_asterisco\t Lexema: ' + $$[$0]]}); 
break;
case 86:
 this.$=builder.newCurrent($$[$0], this._$.first_line, this._$.first_column+1); 
					 grammar_stack.push({'PRIMITIVO -> tk_punto {SS=builder.newCurrent(Param)}':['token: tk_punto\t Lexema: ' + $$[$0]]}); 
break;
case 87:
 this.$=builder.newParent($$[$0], this._$.first_line, this._$.first_column+1);
					   grammar_stack.push({'PRIMITIVO -> tk_2puntos {SS=builder.newParent(Param)}':['token: tk_2puntos\t Lexema: ' + $$[$0]]}); 
break;
case 88:
 this.$=builder.newAttribute($$[$0], this._$.first_line, this._$.first_column+1);
							grammar_stack.push({'PRIMITIVO -> tk_arroba tk_id {SS=builder.newAttribute(Param)}':['token: tk_arroba\t Lexema: ' + $$[$0-1], 'token: tk_id\t Lexema: ' + $$[$0]]}); 
break;
case 89:
 this.$=builder.newAttribute($$[$0], this._$.first_line, this._$.first_column+1); 
							 grammar_stack.push({'PRIMITIVO -> tk_arroba tk_asterisco {SS=builder.newAttribute(Param)}':['token: tk_arroba\t Lexema: ' + $$[$0-1], 'token: tk_asterisco\t Lexema: ' + $$[$0]]});
break;
case 91:
 this.$=builder.newValue($$[$0], Tipos.STRING, this._$.first_line, this._$.first_column+1);
						   grammar_stack.push({'PRIMITIVO -> tk_attribute_d {SS=builder.newValue(Param)}':['token: tk_attribute_d\t Lexema: ' + $$[$0]]}); 
break;
case 92:
 this.$=builder.newValue($$[$0], Tipos.STRING, this._$.first_line, this._$.first_column+1); 
						   grammar_stack.push({'PRIMITIVO -> tk_attribute_s {SS=builder.newValue(Param)}':['token: tk_attribute_s\t Lexema: ' + $$[$0]]}); 
break;
case 93:
 this.$=builder.newValue($$[$0-2], Tipos.FUNCION_TEXT, this._$.first_line, this._$.first_column+1);
								grammar_stack.push({'FUNC -> tk_text tk_ParA tk_ParC {SS=builder.newValue(Param)}':['token: tk_text\t Lexema: ' + $$[$0-2], 'token: tk_ParA\t Lexema: ' + $$[$0-1], 'token: tk_ParC\t Lexema: ' + $$[$0]]}); 
break;
case 94:
 this.$=builder.newValue($$[$0-2], Tipos.FUNCION_LAST, this._$.first_line, this._$.first_column+1);
								grammar_stack.push({'FUNC -> tk_last tk_ParA tk_ParC {SS=builder.newValue(Param)}':['token: tk_last\t Lexema: ' + $$[$0-2], 'token: tk_ParA\t Lexema: ' + $$[$0-1], 'token: tk_ParC\t Lexema: ' + $$[$0]]}); 
break;
case 95:
 this.$=builder.newValue($$[$0-2], Tipos.FUNCION_POSITION, this._$.first_line, this._$.first_column+1); 
									grammar_stack.push({'FUNC -> tk_position tk_ParA tk_ParC {SS=builder.newValue(Param)}':['token: tk_position\t Lexema: ' + $$[$0-2], 'token: tk_ParA\t Lexema: ' + $$[$0-1], 'token: tk_ParC\t Lexema: ' + $$[$0]]});
break;
case 96:
 this.$=builder.newValue($$[$0-2], Tipos.FUNCION_NODE, this._$.first_line, this._$.first_column+1); 
								grammar_stack.push({'FUNC -> tk_node tk_ParA tk_ParC {SS=builder.newValue(Param)}':['token: tk_node\t Lexema: ' + $$[$0-2], 'token: tk_ParA\t Lexema: ' + $$[$0-1], 'token: tk_ParC\t Lexema: ' + $$[$0]]});
break;
case 97:
 this.$=builder.newAxisObject($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1);
								prod_1 = grammar_stack.pop();
								prod_2 = grammar_stack.pop();
								grammar_stack.push({'AXIS -> AXISNAME tk_4puntos QUERY {SS=builder.newAxisObject(Param)}':[prod_2, 'token: tk_4puntos\t Lexema: ' + $$[$0-1], prod_1]}); 
break;
case 98:
 this.$ = Tipos.AXIS_ANCESTOR;
						grammar_stack.push({'AXISNAME -> tk_ancestor {SS = Tipos.AxisTipo}':['token: tk_ancestor\t Lexema: ' + $$[$0]]}); 
break;
case 99:
 this.$ = Tipos.AXIS_ANCESTOR_OR_SELF;
						grammar_stack.push({'AXISNAME -> tk_ancestor2 {SS = Tipos.AxisTipo}':['token: tk_ancestor2\t Lexema: ' + $$[$0]]}); 
break;
case 100:
 this.$ = Tipos.AXIS_ATTRIBUTE;
						grammar_stack.push({'AXISNAME -> tk_attribute {SS = Tipos.AxisTipo}':['token: tk_attribute\t Lexema: ' + $$[$0]]}); 
break;
case 101:
 this.$ = Tipos.AXIS_CHILD;
						grammar_stack.push({'AXISNAME -> tk_child {SS = Tipos.AxisTipo}':['token: tk_child\t Lexema: ' + $$[$0]]}); 
break;
case 102:
 this.$ = Tipos.AXIS_DESCENDANT;
						grammar_stack.push({'AXISNAME -> tk_descendant {SS = Tipos.AxisTipo}':['token: tk_descendant\t Lexema: ' + $$[$0]]}); 
break;
case 103:
 this.$ = Tipos.AXIS_DESCENDANT_OR_SELF;
						grammar_stack.push({'AXISNAME -> tk_descendant2 {SS = Tipos.AxisTipo}':['token: tk_descendant2\t Lexema: ' + $$[$0]]}); 
break;
case 104:
 this.$ = Tipos.AXIS_FOLLOWING;
						grammar_stack.push({'AXISNAME -> tk_following {SS = Tipos.AxisTipo}':['token: tk_following\t Lexema: ' + $$[$0]]}); 
break;
case 105:
 this.$ = Tipos.AXIS_FOLLOWING_SIBLING;
						grammar_stack.push({'AXISNAME -> tk_following2 {SS = Tipos.AxisTipo}':['token: tk_follownig2\t Lexema: ' + $$[$0]]}); 
break;
case 106:
 this.$ = Tipos.AXIS_NAMESPACE;
						grammar_stack.push({'AXISNAME -> tk_namespace {SS = Tipos.AxisTipo}':['token: tk_namespace\t Lexema: ' + $$[$0]]}); 
break;
case 107:
 this.$ = Tipos.AXIS_PARENT;
						grammar_stack.push({'AXISNAME -> tk_parent {SS = Tipos.AxisTipo}':['token: tk_parent\t Lexema: ' + $$[$0]]}); 
break;
case 108:
 this.$ = Tipos.AXIS_PRECEDING;
						grammar_stack.push({'AXISNAME -> tk_preceding {SS = Tipos.AxisTipo}':['token: tk_preceding\t Lexema: ' + $$[$0]]}); 
break;
case 109:
 this.$ = Tipos.AXIS_PRECEDING_SIBLING;
						grammar_stack.push({'AXISNAME -> tk_preceding2 {SS = Tipos.AxisTipo}':['token: tk_preceding2\t Lexema: ' + $$[$0]]}); 
break;
case 110:
 this.$ = Tipos.AXIS_SELF;
						grammar_stack.push({'AXISNAME -> tk_self {SS = Tipos.AxisTipo}':['token: tk_self\t Lexema: ' + $$[$0]]}); 
break;
}
},
table: [{3:1,4:2,6:3,7:[1,4],8:$V0,13:$V1,14:6,15:$V2,16:9,17:$V3,18:15,19:16,20:17,21:18,22:19,23:$V4,28:$V5,29:33,31:$V6,34:$V7,36:$V8,38:$V9,47:5,51:$Va,54:34,56:7,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{1:[3]},{5:[1,57],55:[1,58]},{5:[1,59],14:60,15:$V2,16:9,17:$V3,18:15,19:16,20:17,21:18,22:19,23:$V4,28:$V5,31:$V6,34:$V7,36:$V8},{8:[1,61]},o($VA,[2,52],{58:13,59:14,74:20,75:21,86:22,29:33,54:34,56:62,8:$V0,13:$V1,38:$V9,51:$Va,57:$Vb,68:$Vc,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VB,[2,5]),o($VC,[2,54]),o($VB,[2,6]),o($VB,[2,7]),o($VB,[2,8]),{8:$V0,13:$V1,29:33,38:$V9,51:$Va,54:34,56:63,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{8:$V0,13:$V1,29:33,38:$V9,51:$Va,54:34,56:64,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VC,[2,57]),o($VC,[2,58]),o($VB,[2,9]),o($VB,[2,10]),o($VB,[2,11]),o($VB,[2,12],{33:$VD}),o($VB,[2,13]),o($VE,$VF,{63:66,60:67,61:$VG}),o($VE,$VF,{60:67,63:69,61:$VG}),{87:[1,70]},{24:71,29:73,38:$V9,39:72},{29:74,38:$V9},{8:$V0,29:33,32:75,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{35:[1,79]},{7:$VJ,8:$V0,29:33,32:81,37:80,38:$V9,43:$VH,48:82,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{43:[1,84]},{43:[1,85]},{43:[1,86]},{43:[1,87]},o($VK,[2,81]),o($VK,[2,82]),o($VK,[2,83]),o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,86]),o($VK,[2,87]),{8:[1,88],68:[1,89]},o($VK,[2,90]),{87:[2,98]},{87:[2,99]},{87:[2,100]},{87:[2,101]},{87:[2,102]},{87:[2,103]},{87:[2,104]},{87:[2,105]},{87:[2,106]},{87:[2,107]},{87:[2,108]},{87:[2,109]},{87:[2,110]},{8:[1,90]},o($VK,[2,91]),o($VK,[2,92]),{1:[2,1]},{8:$V0,13:$V1,29:33,38:$V9,47:91,51:$Va,54:34,56:7,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{1:[2,2]},o($VB,[2,4]),{8:$VL,9:92,10:$VM},o($VC,[2,53]),o($VC,[2,55]),o($VC,[2,56]),{8:$V0,29:33,32:94,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},o($VE,[2,79]),o($VE,[2,61],{61:[1,95]}),{8:$V0,29:33,32:96,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},o($VE,[2,80]),{8:$V0,13:$V1,29:33,38:$V9,51:$Va,54:34,56:97,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{19:102,20:103,21:104,22:105,25:98,26:[1,100],27:101,28:$V5,31:$V6,33:$VN,34:$V7,36:$V8},o($VO,[2,29]),{40:[1,106],42:[1,107]},{30:[1,108]},o($VB,[2,22],{7:$VP,10:$VQ,53:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$}),{8:$V0,29:33,32:122,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:123,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},o($V01,[2,78]),{8:$V0,29:33,32:124,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},o($VB,[2,25],{48:125,7:$VJ}),o($VB,[2,26],{7:$VP,10:$VQ,53:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$}),o($V11,[2,38]),{8:$V21},{45:[1,127]},{45:[1,128]},{45:[1,129]},{45:[1,130]},o($VK,[2,88]),o($VK,[2,89]),o([5,7,8,10,12,13,15,17,23,26,28,30,31,33,34,36,38,40,42,44,45,51,53,55,57,61,62,64,65,66,67,68,69,70,71,72,73,76,77,78,79,80,81,82,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100],[2,27]),o($VA,[2,51],{58:13,59:14,74:20,75:21,86:22,29:33,54:34,56:62,8:$V0,13:$V1,38:$V9,51:$Va,57:$Vb,68:$Vc,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),{10:[1,131]},{53:[1,132]},o($V31,[2,23],{7:$VP,10:$VQ,53:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$}),{8:$V0,29:33,32:133,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{7:$VP,10:$VQ,53:$VR,62:[1,134],64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$},o($VC,[2,97]),o($VB,[2,14]),{29:73,38:$V9,39:135},{19:102,20:103,21:104,22:105,27:136,28:$V5,31:$V6,34:$V7,36:$V8},o($VB,[2,16]),o($VB,[2,17]),o($VB,[2,18]),o($VB,[2,19],{33:$VD}),o($VB,[2,20]),{8:$V0,13:$V1,29:33,38:$V9,41:137,43:$V41,47:139,51:$Va,54:34,56:7,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{29:140,38:$V9},{24:141,29:73,38:$V9,39:72},{8:$V0,29:33,32:142,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:143,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:144,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:145,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:146,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:147,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:148,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:149,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:150,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:151,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:152,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:153,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},{8:$V0,29:33,32:154,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},o($V01,[2,72]),{7:$VP,10:$VQ,45:[1,155],53:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$},o($V31,[2,24],{7:$VP,10:$VQ,53:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$}),o($V11,[2,37]),o($V51,$VM,{9:156,8:$VL}),o($VK,[2,93]),o($VK,[2,94]),o($VK,[2,95]),o($VK,[2,96]),{11:[1,157]},{7:$VJ,11:$V61,48:161,49:159,50:160,51:$V71,54:158,80:$Vh,81:$Vi},{7:$VP,10:$VQ,53:$VR,62:[1,164],64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$},o($VK,[2,60]),o($VO,[2,28]),o($VB,[2,15]),o($VO,[2,30]),{8:$V0,29:33,32:165,38:$V9,43:$VH,46:166,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},o($VO,[2,34],{58:13,59:14,74:20,75:21,86:22,29:33,54:34,56:62,8:$V0,13:$V1,38:$V9,51:$Va,57:$Vb,68:$Vc,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),{40:[1,167]},o($VB,[2,21],{33:$VN}),o($V81,[2,63],{66:$VU,67:$VV,68:$VW,69:$VX,70:$VY}),o($V81,[2,64],{66:$VU,67:$VV,68:$VW,69:$VX,70:$VY}),o($V81,[2,65],{66:$VU,67:$VV,68:$VW,69:$VX,70:$VY}),o($V81,[2,66],{66:$VU,67:$VV,68:$VW,69:$VX,70:$VY}),o($V91,[2,67],{68:$VW,69:$VX,70:$VY}),o($V91,[2,68],{68:$VW,69:$VX,70:$VY}),o($V01,[2,69]),o($V01,[2,70]),o($V01,[2,71]),o([5,12,15,17,23,28,31,33,34,36,44,45,62,71],[2,74],{7:$VP,10:$VQ,53:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,72:$V_,73:$V$}),o([5,12,15,17,23,28,31,33,34,36,44,45,62,71,72],[2,75],{7:$VP,10:$VQ,53:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,73:$V$}),o($V81,[2,76],{66:$VU,67:$VV,68:$VW,69:$VX,70:$VY}),o($V81,[2,77],{66:$VU,67:$VV,68:$VW,69:$VX,70:$VY}),o($V01,[2,73]),{10:[1,168],13:[1,169]},{6:170,14:6,15:$V2,16:9,17:$V3,18:15,19:16,20:17,21:18,22:19,23:$V4,28:$V5,31:$V6,34:$V7,36:$V8},o($V51,[2,48]),o($V51,[2,49],{50:171,11:$V61,51:$V71}),o($Va1,[2,43]),o($Va1,[2,44]),o($Va1,[2,45]),{8:$V0,13:$V1,29:33,38:$V9,47:172,51:$Va,52:[1,173],54:34,56:7,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VK,[2,59]),o($Vb1,[2,36],{7:$VP,10:$VQ,44:[1,174],53:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$}),{33:[1,176],45:[1,175]},{8:$V0,13:$V1,29:33,38:$V9,41:177,43:$V41,47:139,51:$Va,54:34,56:7,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{7:[1,179],11:$V61,48:161,49:178,50:160,51:$V71},{10:[1,180]},{12:[1,181],14:60,15:$V2,16:9,17:$V3,18:15,19:16,20:17,21:18,22:19,23:$V4,28:$V5,31:$V6,34:$V7,36:$V8},o($Va1,[2,42]),{8:$V0,12:[1,182],13:$V1,29:33,38:$V9,51:$Va,54:34,56:62,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{43:[1,183]},{8:$V0,29:33,32:184,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},o($VO,[2,33]),{8:$V0,29:33,32:185,38:$V9,43:$VH,51:$Va,54:34,58:78,67:$VI,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm},o($VO,[2,31]),{7:[1,186],11:$V61,50:171,51:$V71},{8:$V21,13:[1,187]},o($Vc1,[2,41]),{7:[1,188]},o($Va1,[2,46]),{8:$V0,13:$V1,29:33,38:$V9,47:189,51:$Va,54:34,56:7,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{7:$VP,10:$VQ,45:[1,190],53:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$},o($Vb1,[2,35],{7:$VP,10:$VQ,53:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$}),{13:[1,191]},{8:[1,192]},{13:[1,193]},{8:$V0,13:$V1,29:33,38:$V9,45:[1,194],51:$Va,54:34,56:62,57:$Vb,58:13,59:14,68:$Vc,74:20,75:21,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:$Vl,85:$Vm,86:22,88:$Vn,89:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VO,[2,32]),{8:[1,195]},{10:[1,196]},{8:[1,197]},{12:[1,198]},{10:[1,199]},o($Vc1,[2,40]),{10:[1,200]},o($Va1,[2,47]),o($Vc1,[2,39]),{5:[1,201]},{1:[2,3]}],
defaultActions: {41:[2,98],42:[2,99],43:[2,100],44:[2,101],45:[2,102],46:[2,103],47:[2,104],48:[2,105],49:[2,106],50:[2,107],51:[2,108],52:[2,109],53:[2,110],57:[2,1],59:[2,2],201:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var attribute = '';
var errors = [];
let grammar_stack = [];
let re = /[^\n\t\r ]+/g

	const { Objeto } = require('../model/xpath/Objeto');
	const { Tipos } = require('../model/xpath/Enum');
    const { XQObjeto } = require('../model/xquery/XQObjeto');
    var builder = new Objeto();
    var queryBuilder = new XQObjeto();
    // const getASTTree = require('./ast_xpath');
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Whitespace
break;
case 1:// XQUERYComment
break;
case 2:// MultiLineComment
break;
case 3:return 76
break;
case 4:return 64
break;
case 5:return 65
break;
case 6:return 7
break;
case 7: this.pushState('content');  return 10;
break;
case 8:return 57
break;
case 9:return 13
break;
case 10:return 30
break;
case 11:return 53
break;
case 12:return 78
break;
case 13:return 77
break;
case 14:return 87
break;
case 15:return 79
break;
case 16:return 38
break;
case 17:return 61
break;
case 18:return 62
break;
case 19:return 43
break;
case 20:return 45
break;
case 21:return 11
break;
case 22: this.pushState('content');  return 12;
break;
case 23:return 68
break;
case 24:return 69
break;
case 25:return 89
break;
case 26:return 88
break;
case 27:return 90
break;
case 28:return 91
break;
case 29:return 93
break;
case 30:return 92
break;
case 31:return 95
break;
case 32:return 94
break;
case 33:return 96
break;
case 34:return 97
break;
case 35:return 99
break;
case 36:return 98
break;
case 37:return 100
break;
case 38:return 85
break;
case 39:return 83
break;
case 40:return 82
break;
case 41:return 84
break;
case 42:return 55
break;
case 43:return 66
break;
case 44:return 67
break;
case 45:return 73
break;
case 46:return 71
break;
case 47:return 72
break;
case 48:return 70
break;
case 49:return 'tk_doc'
break;
case 50:return 23
break;
case 51:return 42
break;
case 52:return 40
break;
case 53:return 28
break;
case 54:return 31
break;
case 55:return 34
break;
case 56:return 35
break;
case 57:return 36
break;
case 58:return 44
break;
case 59:return 33
break;
case 60:return 52
break;
case 61: attribute = ''; this.begin("string_doubleq"); 
break;
case 62: attribute += yy_.yytext; 
break;
case 63: attribute += "\""; 
break;
case 64: attribute += "\n"; 
break;
case 65: attribute += " ";  
break;
case 66: attribute += "\t"; 
break;
case 67: attribute += "\\"; 
break;
case 68: attribute += "\'"; 
break;
case 69: attribute += "\r"; 
break;
case 70: yy_.yytext = attribute; this.popState(); return 80; 
break;
case 71: attribute = ''; this.begin("string_singleq"); 
break;
case 72: attribute += yy_.yytext; 
break;
case 73: attribute += "\""; 
break;
case 74: attribute += "\n"; 
break;
case 75: attribute += " ";  
break;
case 76: attribute += "\t"; 
break;
case 77: attribute += "\\"; 
break;
case 78: attribute += "\'"; 
break;
case 79: attribute += "\r"; 
break;
case 80: yy_.yytext = attribute; this.popState(); return 81; 
break;
case 81:/* MultiLineComment*/
break;
case 82: if(yy_.yytext.match(re)) { return 51;} 
break;
case 83: this.popState(); return 11; 
break;
case 84: this.popState(); return 7; 
break;
case 85:return 5
break;
case 86: errors.push({ tipo: "Léxico", error: yy_.yytext, origen: "XQuery", linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
case 87:return 8
break;
case 88:return 5
break;
case 89: errors.push({ tipo: "Léxico", error: yy_.yytext, origen: "XQuery", linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\(:[\s\S\n]*?:\))/i,/^(?:<!--[\s\S\n]*?-->)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?::=)/i,/^(?:=)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:::)/i,/^(?:@)/i,/^(?:\$)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:node\b)/i,/^(?:last\b)/i,/^(?:text\b)/i,/^(?:position\b)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:!=)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:doc\b)/i,/^(?:for\b)/i,/^(?:at\b)/i,/^(?:in\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:return\b)/i,/^(?:to\b)/i,/^(?:,)/i,/^(?:data\b)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:['])/i,/^(?:[^'\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:['])/i,/^(?:<!--([^-]|-[^-])*-->)/i,/^(?:(([^<>&\"{}]|&lt;|&gt;|&amp;|&apos;|&quot;)+))/i,/^(?:\{)/i,/^(?:<)/i,/^(?:$)/i,/^(?:.)/i,/^(?:[\w\u00e1\u00e9\u00ed\u00f3\u00fa\u00c1\u00c9\u00cd\u00d3\u00da\u00f1\u00d1]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"content":{"rules":[81,82,83,84,85,86],"inclusive":false},"string_singleq":{"rules":[72,73,74,75,76,77,78,79,80],"inclusive":false},"string_doubleq":{"rules":[62,63,64,65,66,67,68,69,70],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xquery;
exports.Parser = xquery.Parser;
exports.parse = function () { return xquery.parse.apply(xquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}