{"version":3,"sources":["fs (ignored)","path (ignored)","./src/environments/environment.ts","./src/js/model/xml/Encoding/Encoding.js","./src/app/app.service.ts","./src/js/model/xml/Ambito/Global.js","./src/js/model/xml/Element.js","./src/js/model/xml/Ambito/Ambito.js","./src/app/app.component.ts","./src/app/app.component.html","./src/js/model/xml/Encoding/Enum.js","./src/app/app.module.ts","./src/js/analyzers/xml_down.js","./src/js/routes/compile.js","./src/js/model/xml/Ambito/Hijos.js","./src/js/analyzers/xml_up.js","./src/js/model/xml/Atributo.js","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,e;;;;;;;;;;;ACAA,e;;;;;;;;;;;;ACAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACftD;AACb,8CAA8C,cAAc;AAC5D;AACA,aAAa,mBAAO,CAAC,oBAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;;;;;;;AC9BO,MAAM,UAAU;IAIrB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAFpC,SAAI,GAAG,uBAAuB,CAAC;IAES,CAAC;IAEzC,OAAO,CAAC,KAAU;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,IAAI,GAAG,UAAU,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM,CAAC,KAAU;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,aAAa,EAAE,KAAK,EAAE;YACtD,YAAY,EAAE,MAAM;SACrB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,KAAU;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,aAAa,EAAE,KAAK,EAAE;YACtD,YAAY,EAAE,MAAM;SACrB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,KAAU;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,aAAa,EAAE,KAAK,EAAE;YACtD,YAAY,EAAE,MAAM;SACrB,CAAC,CAAC;IACL,CAAC;;oEA1BU,UAAU;6FAAV,UAAU,WAAV,UAAU,mBAFT,MAAM;;;;;;;;;;;;;ACJP;AACb;AACA,4CAA4C;AAC5C;AACA,8CAA8C,cAAc;AAC5D;AACA,8BAA8B,mBAAO,CAAC,qBAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;ACfa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;ACvBa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC,sEAAsE,uBAAuB,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC,sEAAsE,uBAAuB,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;AC9GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;;;;;;;ICiF1B,qEAAiD;IAC/C,yEAAgB;IAAA,uDAAO;IAAA,4DAAK;IAC5B,qEAAI;IAAA,uDAAW;IAAA,4DAAK;IACpB,yEAAwB;IAAA,uDAAa;IAAA,4DAAK;IAC1C,qEAAI;IAAA,uDAAkB;IAAA,4DAAK;IAC3B,qEAAI;IAAA,wDAAc;IAAA,4DAAK;IACvB,sEAAI;IAAA,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L;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE;AAChE,4BAA4B;AAC5B;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,QAAQ,WAAW,GAAG,mBAAO,CAAC,mCAAuB;AACrD,QAAQ,UAAU,GAAG,mBAAO,CAAC,kCAAsB;AACnD,QAAQ,WAAW,GAAG,mBAAO,CAAC,4CAAgC;AAC9D;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8B;AACvB;AACA,gC;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,0B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,gCAAgC,iBAAiB,W;AACjD;AACA,wBAAwB,8B;AACxB;AACA,iC;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,0B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,gCAAgC,iBAAiB,W;AACjD;AACA;AACA;AACA;AACA;AACA,sBAAsB,qHAAqH,EAAE,kB;AAC7I;AACA;AACA,CAAC;AACD;AACA,aAAa,kBAAkB,uDAAuD,mBAAmB,sDAAsD,YAAY;AAC3K,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;;AC/2Ba;AACb,eAAe,mBAAO,CAAC,wCAA4B;AACnD,eAAe,mBAAO,CAAC,wCAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAO,CAAC,iCAAqB;AAC1D,iEAAiE;AACjE;AACA;AACA,6BAA6B,mBAAO,CAAC,mCAAuB;AAC5D,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wGAAwG;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kGAAkG;AACjI;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;;;AClEL;AACb,eAAe,mBAAO,CAAC,sBAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAkB;;;;;;;;;;;;ACXlB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,eAAe,kCAAkC;AACjD,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mJAAmJ;AACnJ,SAAS;;AAET;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,YAAY,IAAI,WAAW,SAAS;AACvE,cAAc,0BAA0B,EAAE;AAC1C,MAAM;AACN,WAAW,gRAAgR;AAC3R,aAAa,6JAA6J;AAC1K;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,4IAA4I,EAAE,SAAS;AACvK;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,cAAc,8IAA8I,EAAE,SAAS,6B;AACvK;AACA;AACA,qBAAqB,uBAAuB,iBAAiB,EAAE,OAAO,aAAa,E;AACnF;AACA;AACA,qBAAqB,iBAAiB,EAAE,OAAO,WAAW,E;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,iBAAiB,qHAAqH;AACtI;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qHAAqH;AACtI;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qHAAqH;AACtI;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qHAAqH;AACtI;AACA;;AAEA;AACA;AACA,cAAc,sJAAsJ,EAAE,e;AACtK;AACA;AACA,e;AACA;AACA;AACA,a;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,uBAAuB,EAAE,iB;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,CAAC;AACD,SAAS,oBAAoB,EAAE,MAAM,EAAE,oBAAoB,EAAE,QAAQ,EAAE,yBAAyB,eAAe,MAAM,EAAE,mBAAmB,EAAE,QAAQ,EAAE,QAAQ,4BAA4B,qBAAqB,8BAA8B,oBAAoB,eAAe,SAAS,GAAG,UAAU,EAAE,wEAAwE,EAAE,UAAU,EAAE,UAAU,EAAE,oBAAoB,EAAE,oBAAoB,EAAE,iDAAiD,EAAE,gBAAgB,iHAAiH,oBAAoB,4CAA4C,gBAAgB,gBAAgB,UAAU,gBAAgB,SAAS,gBAAgB,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AACrzB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE;AAChE,4BAA4B;AAC5B;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,QAAQ,WAAW,GAAG,mBAAO,CAAC,mCAAuB;AACrD,QAAQ,UAAU,GAAG,mBAAO,CAAC,kCAAsB;AACnD,QAAQ,WAAW,GAAG,mBAAO,CAAC,4CAAgC;AAC9D;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8B;AACvB;AACA,gC;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,0B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,gCAAgC,iBAAiB,W;AACjD;AACA,wBAAwB,8B;AACxB;AACA,iC;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,0B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,2B;AACA;AACA,gCAAgC,iBAAiB,wBAAwB,W;AACzE;AACA;AACA;AACA;AACA;AACA,sBAAsB,qHAAqH,EAAE,kB;AAC7I;AACA;AACA,CAAC;AACD;AACA,aAAa,kBAAkB,uDAAuD,mBAAmB,sDAAsD,YAAY;AAC3K,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;;AC/2Ba;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;;;;;;;ACZ+C;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["/* (ignored) */","/* (ignored) */","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encoding = void 0;\nvar Enum_1 = require(\"./Enum\");\nvar Encoding = /** @class */ (function () {\n    function Encoding(encoding) {\n        this.codes = Enum_1.Codes;\n        this.encoding = encoding;\n        this.getCode();\n    }\n    Encoding.prototype.getCode = function () {\n        var decl = String(this.encoding).replace(/\\s/g, '').toLowerCase();\n        var subs = decl.substr(decl.indexOf(\"encoding=\") + 9);\n        var code;\n        if (subs[0] === \"\\\"\") {\n            code = subs.substr(1, subs.indexOf(\"\\\"\", 1) - 1);\n        }\n        else if (subs[0] === \"\\'\") {\n            code = subs.substr(1, subs.indexOf(\"\\'\", 1) - 1);\n        }\n        switch (code) {\n            case \"utf-8\":\n                this.encoding = this.codes.UTF8;\n                break;\n            case \"iso-8859-1\":\n                this.encoding = this.codes.ISO8859_1;\n                break;\n            case \"ascii\":\n                this.encoding = this.codes.ASCII;\n                break;\n            default:\n                this.encoding = this.codes.INVALID;\n        }\n    };\n    return Encoding;\n}());\nexports.Encoding = Encoding;\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n\n  _url = \"http://localhost:3080\";\n\n  constructor(private http: HttpClient) { }\n\n  compile(input: any) {\n    return this.http.post<any>(this._url + '/compile', input);\n  }\n\n  getAST(input: any) {\n    return this.http.post(this._url + '/AST_report', input, {\n      responseType: 'blob'\n    });\n  }\n\n  getCST(input: any) {\n    return this.http.post(this._url + '/CST_report', input, {\n      responseType: 'blob'\n    });\n  }\n\n  getDAG(input: any) {\n    return this.http.post(this._url + '/DAG_report', input, {\n      responseType: 'blob'\n    });\n  }\n\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Global = void 0;\nvar Hijos_1 = __importDefault(require(\"./Hijos\"));\nvar Global = /** @class */ (function () {\n    function Global(expresiones, ambito) {\n        this.expresiones = expresiones;\n        this.ambito = ambito;\n        Hijos_1.default.exec(expresiones, this.ambito);\n    }\n    return Global;\n}());\nexports.Global = Global;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Element = void 0;\nvar Element = /** @class */ (function () {\n    function Element(id_open, attributes, value, childs, line, column, id_close) {\n        this.id_open = id_open;\n        this.id_close = id_close;\n        this.attributes = attributes;\n        this.value = value;\n        this.childs = childs;\n        this.line = line;\n        this.column = column;\n        this.father = null;\n    }\n    Element.prototype.verificateNames = function () {\n        if ((this.id_close !== null) && (this.id_open !== this.id_close))\n            return \"La etiqueta de apertura no coincide con la de cierre.\";\n        if (this.id_open.replace(/\\s/g, '').toLowerCase() === \"xml\")\n            return \"No se puede nombrar una etiqueta con las letras XML\";\n        return \"\";\n    };\n    return Element;\n}());\nexports.Element = Element;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ambito = void 0;\nvar Ambito = /** @class */ (function () {\n    function Ambito(_anterior, _tipo) {\n        this.anterior = _anterior;\n        this.tipo = _tipo;\n        this.tablaSimbolos = [];\n    }\n    Ambito.prototype.isGlobal = function () {\n        return this.tipo === \"global\";\n    };\n    Ambito.prototype.addSimbolo = function (_simbolo) {\n        this.tablaSimbolos.push(_simbolo);\n    };\n    Ambito.prototype.getSimbolo = function (_s) {\n        var e;\n        for (e = this; e != null; e = e.anterior) {\n            var encontrado = e.tablaSimbolos.find(function (element) { return element === _s; });\n            if (encontrado)\n                return encontrado;\n        }\n        return null;\n    };\n    Ambito.prototype.existeSimbolo = function (_s) {\n        if (this.getSimbolo(_s) !== null)\n            return true;\n        else\n            return false;\n    };\n    Ambito.prototype.actualizar = function (_s, _simbolo) {\n        var e;\n        var i = 0;\n        for (e = this; e != null; e = e.anterior) {\n            var encontrado = e.tablaSimbolos.find(function (element) { return element === _s; });\n            if (encontrado) {\n                this.tablaSimbolos[i] = _s;\n                break;\n            }\n            i++;\n        }\n    };\n    Ambito.prototype.getGlobal = function () {\n        var e;\n        for (e = this; e != null; e = e.anterior) {\n            if (e.anterior === null)\n                return e;\n        }\n        return null;\n    };\n    Ambito.prototype.concatAttributes = function (attributes) {\n        var concat = \"\";\n        attributes.forEach(function (attr) {\n            concat = concat + attr.id + \": \" + attr.value + \", \";\n        });\n        return concat.substring(0, concat.length - 2);\n    };\n    Ambito.prototype.getArraySymbols = function () {\n        var _this = this;\n        var simbolos = [];\n        console.log(\"tabla\", this.tablaSimbolos);\n        try {\n            this.tablaSimbolos.forEach(function (element) {\n                if (element.childs) {\n                    var dad = _this.createSymbol(element, (element.father === null ? \"global\" : element.father));\n                    simbolos.push(dad);\n                    simbolos.concat(_this.toRunTree(simbolos, element.childs, dad.id));\n                }\n                else {\n                    var symb = _this.createSymbol(element, (element.father === null ? \"global\" : element.father));\n                    simbolos.push(symb);\n                }\n            });\n            return simbolos;\n        }\n        catch (error) {\n            console.log(error);\n            return simbolos;\n        }\n    };\n    Ambito.prototype.toRunTree = function (_symbols, _array, _father) {\n        var _this = this;\n        _array.forEach(function (element) {\n            if (element.childs) {\n                var dad = _this.createSymbol(element, _father);\n                _symbols.push(dad);\n                var concat = _father + (\"->\" + dad.id);\n                _symbols.concat(_this.toRunTree(_symbols, element.childs, concat));\n            }\n            else {\n                var symb = _this.createSymbol(element, _father);\n                _symbols.push(symb);\n            }\n        });\n        return _symbols;\n    };\n    Ambito.prototype.createSymbol = function (_element, _entorno) {\n        var type = (_element.id_close === null ? 'Simple' : 'Doble');\n        var attr = (_element.attributes === null ? '' : this.concatAttributes(_element.attributes));\n        var symb = {\n            id: _element.id_open,\n            value: _element.value,\n            tipo: type,\n            entorno: _entorno,\n            atributos: attr,\n            linea: _element.line,\n            columna: _element.column\n        };\n        return symb;\n    };\n    return Ambito;\n}());\nexports.Ambito = Ambito;\n","import { Component } from '@angular/core';\nimport { AppService } from './app.service';\nimport { saveAs } from 'file-saver';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor(private appService: AppService) { }\n\n  EditorOptions = {\n    theme: \"vs-dark\",\n    automaticLayout: true,\n    scrollBeyondLastLine: false,\n    fontSize: 16,\n    minimap: {\n      enabled: true\n    },\n    language: 'xml'\n  }\n\n  ConsoleOptions = {\n    theme: \"vs-dark\",\n    readOnly: true,\n    automaticLayout: true,\n    scrollBeyondLastLine: false,\n    fontSize: 16,\n    minimap: {\n      enabled: true\n    },\n    language: 'xml'\n  }\n\n  entrada: string = '';\n  consulta: string = '';\n  salida: string = '';\n\n  fname: string = '';\n  simbolos: any = [];\n  errores: any = [];\n\n  newTab() {\n    window.open(\"/tytusx-G23\", \"_blank\");\n  }\n\n  closeTab() {\n    window.close();\n  }\n\n  onSubmit() {\n    let grammar_value = (<HTMLSelectElement>document.getElementById('grammar_selector')).value;\n    if (this.entrada != \"\" && this.consulta != \"\") {\n      const x = {\n        xml: this.entrada, // documento XML\n        query: this.consulta, // consultas\n        grammar: Number(grammar_value) // gramática 1=ascendente, 2=descendente\n      }\n      // llamo a la función compile que devuelve un objeto de retorno\n      let data = require('../js/routes/compile').compile(x);\n      this.salida = data.output;\n      this.errores = data.arreglo_errores;\n      this.simbolos = data.arreglo_simbolos;\n      console.log('Data received!');\n    } else\n      alert(\"Alguna entrada se encuentra vacía. Intente de nuevo.\");\n  }\n\n  getAST() {\n    this.simbolos = [];\n    this.errores = [];\n    if (this.entrada != \"\") {\n      const x = { \"input\": this.entrada }\n      this.appService.getAST(x).subscribe(\n        data => {\n          saveAs(data, \"AST\");\n          this.salida = \"AST has been generated!\";\n          console.log('AST received!');\n        },\n        error => {\n          console.log('There was an error :(', error);\n          this.salida = \"Ocurrió un error al analizar la entrada.\\nNo se generó el AST.\"\n        }\n      );\n    } else\n      alert(\"Entrada vacía. No se puede generar el AST.\");\n  }\n\n  getCST() {\n    this.simbolos = [];\n    this.errores = [];\n    if (this.entrada != \"\") {\n      const x = { \"input\": this.entrada }\n      this.appService.getCST(x).subscribe(\n        data => {\n          saveAs(data, \"CST\");\n          this.salida = \"CST has been generated!\";\n          console.log('CST received!');\n        },\n        error => {\n          console.log('There was an error :(', error);\n          this.salida = \"Ocurrió un error al analizar la entrada.\\nNo se generó el CST.\"\n        }\n      );\n    } else\n      alert(\"Entrada vacía. No se puede generar el CST.\");\n  }\n\n  getDAG() {\n    this.simbolos = [];\n    this.errores = [];\n    if (this.entrada != \"\") {\n      const x = { \"input\": this.entrada }\n      this.appService.getDAG(x).subscribe(\n        data => {\n          saveAs(data, \"DAG\");\n          this.salida = \"DAG has been generated!\";\n          console.log('DAG received!');\n        },\n        error => {\n          console.log('There was an error :(', error);\n          this.salida = \"Ocurrió un error al analizar la entrada.\\nNo se generó el DAG.\"\n        }\n      );\n    } else\n      alert(\"Entrada vacía. No se puede generar el DAG.\");\n  }\n\n\n  saveFile() {\n    var f = document.createElement('a');\n    f.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(this.entrada));\n    f.setAttribute('download', this.fname ? this.fname.replace(\"C:\\\\fakepath\\\\\", \"\") : 'newFile.xml');\n    if (document.createEvent) {\n      var event = document.createEvent('MouseEvents');\n      event.initEvent('click', true, true);\n      f.dispatchEvent(event);\n    }\n    else {\n      f.click();\n    }\n    console.log('File saved!');\n  }\n\n  openDialog() {\n    document.getElementById(\"fileInput\")!.click();\n  }\n\n  readFile(event: any) {\n    let input = event.target;\n    let reader = new FileReader();\n    reader.onload = () => {\n      var text = reader.result;\n      if (text) {\n        this.entrada = text.toString();\n      }\n    }\n    reader.readAsText(input.files[0]);\n    this.salida = '';\n    console.log('File opened!')\n  }\n\n}\n","<div class=\"container-fluid title pt-2 pb-1\">\n  <h2>TytusX</h2>\n</div>\n<div class=\"btn-toolbar\" role=\"toolbar\">\n  <div class=\"mb-2 btn-group\">\n    <button type=\"button\" class=\"btn btn-dark rounded-0\" (click)=\"openDialog()\">Abrir\n      <input id=\"fileInput\" type=\"file\" style=\"display:none\" accept=\".xml\" (change)=\"readFile($event)\"\n        [(ngModel)]=\"fname\">\n    </button>\n    <button (click)=\"saveFile()\" type=\"button\" class=\"btn btn-dark rounded-0\">Guardar</button>\n    <button (click)=\"newTab()\" type=\"button\" class=\"btn btn-dark rounded-0\">Nueva pestaña</button>\n    <button (click)=\"closeTab()\" type=\"button\" class=\"btn btn-dark rounded-0\">Cerrar pestaña</button>\n    <div class=\"dropdown\">\n      <button class=\"btn btn-dark rounded-0 dropdown-toggle\" type=\"button\" id=\"dropdownMenu\" data-toggle=\"dropdown\"\n        aria-haspopup=\"true\" aria-expanded=\"false\">\n        Reportes\n      </button>\n      <div class=\"dropdown-menu rounded-0 bg-dark\">\n        <button (click)=\"getAST()\" class=\"dropdown-item text-white item\" type=\"button\">AST</button>\n        <button (click)=\"getCST()\" class=\"dropdown-item text-white item\" type=\"button\">CST</button>\n        <button (click)=\"getDAG()\" class=\"dropdown-item text-white item\" type=\"button\">DAG</button>\n      </div>\n    </div>\n  </div>\n  <div class=\"btn-group sel_g\" role=\"group\">\n    <select id=\"grammar_selector\" class=\"form-select btn btn-dark rounded-0\">\n      <option disabled>Seleccione gramática</option>\n      <option selected value=\"1\">Ascendente</option>\n      <option value=\"2\">Descendente</option>\n    </select>\n  </div>\n</div>\n\n\n<div class=\"container-fluid px-5 pt-2\">\n\n  <form #iForm=\"ngForm\" class=\"mb-4\" (ngSubmit)=\"onSubmit()\" novalidate>\n    <div class=\"row mb-5 file-editors\">\n      <div class=\"col-lg-6 col-sm-12\">\n        <p class=\"my-0 text-white subtitulo\">Entrada XML</p>\n        <ngx-monaco-editor id=\"entrada\" name=\"entrada\" class=\"codebox\" [options]=\"EditorOptions\" [(ngModel)]=\"entrada\">\n        </ngx-monaco-editor>\n      </div>\n      <div class=\"col-lg-6 col-sm-12\">\n        <p class=\"my-0 text-white subtitulo\">Editor de consultas</p>\n        <ngx-monaco-editor id=\"consulta\" name=\"consulta\" class=\"codebox\" [options]=\"EditorOptions\"\n          [(ngModel)]=\"consulta\">\n        </ngx-monaco-editor>\n      </div>\n    </div>\n    <div class=\"row text-center\">\n      <div class=\"col-12\">\n        <button type=\"submit\" class=\"btn btn-outline-light btn-lg\"><i class=\"fas fa-play-circle\"></i> COMPILAR</button>\n      </div>\n    </div>\n    <div class=\"row mb-5 file-console\">\n      <div class=\"col-12\">\n        <p class=\"my-0 text-white subtitulo\">Consola de salida</p>\n        <ngx-monaco-editor id=\"salida\" name=\"salida\" class=\"console\" [options]=\"ConsoleOptions\" [(ngModel)]=\"salida\">\n        </ngx-monaco-editor>\n      </div>\n    </div>\n  </form>\n  <br>\n  <hr>\n\n  <div class=\"row my-5\">\n    <div class=\"col-12\">\n      <p class=\"my-1 text-white subtitulo\">Tabla de símbolos</p>\n      <table class=\"table table-striped table-dark\">\n        <thead>\n          <tr>\n            <th class=\"text-center\" scope=\"col\">#</th>\n            <th class=\"text-center\" scope=\"col\">Id</th>\n            <th class=\"text-center\" scope=\"col\">Tipo etiqueta</th>\n            <th class=\"text-center\" scope=\"col\">Atributos</th>\n            <th class=\"text-center\" scope=\"col\">Contenido</th>\n            <th class=\"text-center\" scope=\"col\">Ámbito</th>\n            <th class=\"text-center\" scope=\"col\">Fila</th>\n            <th class=\"text-center\" scope=\"col\">Columna</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of simbolos; let i = index\">\n            <th scope=\"row\">{{i+1}}</th>\n            <td>{{item.id}}</td>\n            <td class=\"text-center\">{{item.tipo}}</td>\n            <td>{{item.atributos}}</td>\n            <td>{{item.value}}</td>\n            <td>{{item.entorno}}</td>\n            <td class=\"text-center\">{{item.linea}}</td>\n            <td class=\"text-center\">{{item.columna}}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <hr>\n\n  <div class=\"row my-5\">\n    <div class=\"col-12\">\n      <p class=\"mt-2 mb-1 text-white subtitulo\">Tabla de errores</p>\n      <table class=\"table table-striped table-dark\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Tipo</th>\n            <th scope=\"col\">Error</th>\n            <th scope=\"col\">Origen</th>\n            <th class=\"text-center\" scope=\"col\">Fila</th>\n            <th class=\"text-center\" scope=\"col\">Columna</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of errores; let i = index\">\n            <th scope=\"row\">{{i+1}}</th>\n            <td>{{item.tipo}}</td>\n            <td>{{item.error}}</td>\n            <td>{{item.origen}}</td>\n            <td class=\"text-center\">{{item.linea}}</td>\n            <td class=\"text-center\">{{item.columna}}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n</div>\n\n<footer class=\"text-center text-lg-start\">\n  <div class=\"text-center p-3\" style=\"background-color: rgba(0, 0, 0, 0.2);\">\n    <p class=\"foot my-0\">\n      © 2021 Grupo 23 - Organización de Lenguajes y Compiladores 2 - TytusX\n    </p>\n  </div>\n</footer>","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Codes = void 0;\nvar Codes;\n(function (Codes) {\n    Codes[Codes[\"UTF8\"] = 0] = \"UTF8\";\n    Codes[Codes[\"ASCII\"] = 1] = \"ASCII\";\n    Codes[Codes[\"ISO8859_1\"] = 2] = \"ISO8859_1\";\n    Codes[Codes[\"INVALID\"] = 3] = \"INVALID\";\n})(Codes = exports.Codes || (exports.Codes = {}));\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\nimport { AppService } from './app.service';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { MonacoEditorModule, MONACO_PATH } from '@materia-ui/ngx-monaco-editor';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    MonacoEditorModule\n  ],\n  providers: [\n    AppService,\n    {\n      provide: MONACO_PATH,\n      useValue: 'https://unpkg.com/monaco-editor@0.19.3/min/vs'\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","/* parser generated by jison 0.4.17 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar xml_down = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,6],$V2=[1,11],$V3=[11,13],$V4=[1,16],$V5=[2,6,8],$V6=[1,25],$V7=[1,26],$V8=[2,8],$V9=[8,9,21],$Va=[9,11,13];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"ini\":3,\"tk_declaration_xml\":4,\"ROOT\":5,\"EOF\":6,\"XML\":7,\"tk_open\":8,\"tk_id\":9,\"ATTR\":10,\"tk_close\":11,\"CHILD\":12,\"tk_bar\":13,\"CONTENT\":14,\"ATTR_P\":15,\"tk_equal\":16,\"TK_ATTR\":17,\"tk_attribute_d\":18,\"tk_attribute_s\":19,\"PROP\":20,\"anything\":21,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",4:\"tk_declaration_xml\",6:\"EOF\",8:\"tk_open\",9:\"tk_id\",11:\"tk_close\",13:\"tk_bar\",16:\"tk_equal\",18:\"tk_attribute_d\",19:\"tk_attribute_s\",21:\"anything\"},\nproductions_: [0,[3,3],[3,2],[5,2],[5,1],[7,9],[7,9],[7,5],[7,8],[7,2],[7,2],[10,1],[10,0],[15,4],[15,3],[17,1],[17,1],[12,2],[12,1],[14,2],[14,1],[20,1],[20,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n\t\tencoding = new Encoding($$[$0-2]);\n\t\tif (encoding.encoding === encoding.codes.INVALID ) {\n\t\t\terrors.push({ tipo: \"Léxico\", error: \"La codificación del XML no es válida.\", origen: \"XML\", linea: this._$.first_line, columna: this._$.first_column+1 }); return { ast: null, errors: errors };\n\t\t}\n\t\tast = { ast: $$[$0-1], encoding: encoding,  errors: errors };\n\t\terrors = [];\n\t\treturn ast;\n\t\nbreak;\ncase 2:\n errors.push({ tipo: \"Sintáctico\", error: \"Sintaxis errónea del documento XML.\", origen: \"XML\", linea: this._$.first_line, columna: this._$.first_column+1 }); return { ast: null, errors: errors }; \nbreak;\ncase 3:\n if ($$[$0-1]!==null) { $$[$0].push($$[$0-1]); this.$=$$[$0]; } else { this.$=null; } \nbreak;\ncase 4: case 18:\n if ($$[$0]!==null) { this.$=[$$[$0]]; } else { this.$=[]; } \nbreak;\ncase 5:\n\n\t\t\ttag = new Element($$[$0-7], $$[$0-6], null, $$[$0-4], this._$.first_line, this._$.first_column+1, $$[$0-1]);\n            hasConflict = tag.verificateNames();\n\t\t\tif (hasConflict === \"\") {\n\t\t\t\ttag.childs.forEach(child => {\n\t\t\t\t\tchild.father = $$[$0-7];\n            \t});\n\t\t\t\tthis.$ = tag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\terrors.push({ tipo: \"Semántico\", error: hasConflict, origen: \"XML\", linea: _$[$0-1].first_line, columna: _$[$0-1].first_column+1 });\n\t\t\t\tthis.$ = null;\n\t\t\t}\n\t\t\nbreak;\ncase 6:\n\n\t\t\ttag = new Element($$[$0-7], $$[$0-6], $$[$0-4], null, this._$.first_line, this._$.first_column+1, $$[$0-1]);\n            hasConflict = tag.verificateNames();\n\t\t\tif (hasConflict === \"\") {\n\t\t\t\tthis.$ = tag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\terrors.push({ tipo: \"Semántico\", error: hasConflict, origen: \"XML\", linea: _$[$0-1].first_line, columna: _$[$0-1].first_column+1 });\n\t\t\t\tthis.$ = null;\n\t\t\t}\n\t\t\nbreak;\ncase 7:\n\n\t\t\ttag = new Element($$[$0-3], $$[$0-2], null, null, this._$.first_line, this._$.first_column+1, null);\n            hasConflict = tag.verificateNames();\n\t\t\tif (hasConflict === \"\") {\n\t\t\t\tthis.$ = tag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\terrors.push({ tipo: \"Semántico\", error: hasConflict, origen: \"XML\", linea: _$[$0-3].first_line, columna: _$[$0-3].first_column+1 });\n\t\t\t\tthis.$ = null;\n\t\t\t}\n\t\t\nbreak;\ncase 8:\n\n\t\t\ttag = new Element($$[$0-6], $$[$0-5], null, null, this._$.first_line, this._$.first_column+1, $$[$0-1]);\n            hasConflict = tag.verificateNames();\n\t\t\tif (hasConflict === \"\") {\n\t\t\t\tthis.$ = tag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\terrors.push({ tipo: \"Semántico\", error: hasConflict, origen: \"XML\", linea: _$[$0-1].first_line, columna: _$[$0-1].first_column+1 });\n\t\t\t\tthis.$ = null;\n\t\t\t}\n\t\t\nbreak;\ncase 9: case 10:\n errors.push({ tipo: \"Sintáctico\", error: \"La etiqueta no fue declarada correctamente.\", origen: \"XML\", linea: this._$.first_line, columna: this._$.first_column+1 }); this.$ = null; \nbreak;\ncase 11: case 15: case 16: case 21: case 22:\n this.$=$$[$0]; \nbreak;\ncase 12:\n this.$=null; \nbreak;\ncase 13:\n\n\t\tattr = new Atributo($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1);\n\t\t$$[$0].push(attr);\n\t\tthis.$=$$[$0];\n\t\nbreak;\ncase 14:\n\n\t\tattr = new Atributo($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1);\n\t\tthis.$=[attr];\n\t\nbreak;\ncase 17:\n if ($$[$0]!==null) { $$[$0-1].push($$[$0]); } this.$=$$[$0-1]; \nbreak;\ncase 19:\n\n\t\t$$[$0]=$$[$0-1]+' '+$$[$0];\n\t\tthis.$=$$[$0];\n\t\nbreak;\ncase 20:\n\n\t\tthis.$=$$[$0];\n\t\nbreak;\n}\n},\ntable: [{2:[1,3],3:1,4:[1,2]},{1:[3]},{2:$V0,5:4,7:5,8:$V1},{6:[1,8]},{6:[1,9]},{2:$V0,5:10,6:[2,4],7:5,8:$V1},{9:$V2},{8:[1,13],11:[1,12]},{1:[2,2]},{1:[2,1]},{6:[2,3]},o($V3,[2,12],{10:14,15:15,9:$V4}),o($V5,[2,9]),o($V5,[2,10]),{11:[1,17],13:[1,18]},o($V3,[2,11]),{16:[1,19]},{2:$V0,7:23,8:[1,22],9:$V6,12:20,14:21,20:24,21:$V7},{11:[1,27]},{17:28,18:[1,29],19:[1,30]},{2:$V0,7:32,8:[1,31]},{8:[1,33]},{9:$V2,13:[1,34]},o($V8,[2,18]),{8:[2,20],9:$V6,14:35,20:24,21:$V7},o($V9,[2,21]),o($V9,[2,22]),o($V5,[2,7]),o($V3,[2,14],{15:36,9:$V4}),o($Va,[2,15]),o($Va,[2,16]),{9:$V2,13:[1,37]},o($V8,[2,17]),{13:[1,38]},{9:[1,39]},{8:[2,19]},o($V3,[2,13]),{9:[1,40]},{9:[1,41]},{11:[1,42]},{11:[1,43]},{11:[1,44]},o($V5,$V8),o($V5,[2,5]),o($V5,[2,6])],\ndefaultActions: {8:[2,2],9:[2,1],10:[2,3],35:[2,19]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        function _parseError (msg, hash) {\n            this.message = msg;\n            this.hash = hash;\n        }\n        _parseError.prototype = Error;\n\n        throw new _parseError(str, hash);\n    }\n},\nparse: function parse (input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\n\tvar attribute = '';\n\tvar errors = [];\n\n\tconst { Atributo } = require('../model/xml/Atributo');\n\tconst { Element } = require('../model/xml/Element');\n\tconst { Encoding } = require('../model/xml/Encoding/Encoding');\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"case-insensitive\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:// Whitespace\nbreak;\ncase 1:// MultiLineComment\nbreak;\ncase 2:return 4\nbreak;\ncase 3:return 8\nbreak;\ncase 4:return 11\nbreak;\ncase 5:return 13\nbreak;\ncase 6:return 16\nbreak;\ncase 7:return 9\nbreak;\ncase 8: attribute = ''; this.begin(\"string_doubleq\"); \nbreak;\ncase 9: attribute += yy_.yytext; \nbreak;\ncase 10: attribute += \"\\\"\"; \nbreak;\ncase 11: attribute += \"\\n\"; \nbreak;\ncase 12: attribute += \" \";  \nbreak;\ncase 13: attribute += \"\\t\"; \nbreak;\ncase 14: attribute += \"\\\\\"; \nbreak;\ncase 15: attribute += \"\\'\"; \nbreak;\ncase 16: attribute += \"\\r\"; \nbreak;\ncase 17: yy_.yytext = attribute; this.popState(); return 18; \nbreak;\ncase 18: attribute = ''; this.begin(\"string_singleq\"); \nbreak;\ncase 19: attribute += yy_.yytext; \nbreak;\ncase 20: attribute += \"\\\"\"; \nbreak;\ncase 21: attribute += \"\\n\"; \nbreak;\ncase 22: attribute += \" \";  \nbreak;\ncase 23: attribute += \"\\t\"; \nbreak;\ncase 24: attribute += \"\\\\\"; \nbreak;\ncase 25: attribute += \"\\'\"; \nbreak;\ncase 26: attribute += \"\\r\"; \nbreak;\ncase 27: yy_.yytext = attribute; this.popState(); return 19; \nbreak;\ncase 28:return 6\nbreak;\ncase 29:return 21\nbreak;\ncase 30: errors.push({ tipo: \"Léxico\", error: yy_.yytext, origen: \"XML\", linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; \nbreak;\n}\n},\nrules: [/^(?:\\s+)/i,/^(?:<!--[\\s\\S\\n]*?-->)/i,/^(?:<\\?xml[\\s\\S\\n]*?\\?>)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\\/)/i,/^(?:=)/i,/^(?:[\\w\\u00e1\\u00e9\\u00ed\\u00f3\\u00fa\\u00c1\\u00c9\\u00cd\\u00d3\\u00da\\u00f1\\u00d1]+)/i,/^(?:[\"])/i,/^(?:[^\"\\\\]+)/i,/^(?:\\\\\")/i,/^(?:\\\\n)/i,/^(?:\\s)/i,/^(?:\\\\t)/i,/^(?:\\\\\\\\)/i,/^(?:\\\\\\\\')/i,/^(?:\\\\r)/i,/^(?:[\"])/i,/^(?:['])/i,/^(?:[^'\\\\]+)/i,/^(?:\\\\\")/i,/^(?:\\\\n)/i,/^(?:\\s)/i,/^(?:\\\\t)/i,/^(?:\\\\\\\\)/i,/^(?:\\\\\\\\')/i,/^(?:\\\\r)/i,/^(?:['])/i,/^(?:$)/i,/^(?:[^><]+)/i,/^(?:.)/i],\nconditions: {\"string_singleq\":{\"rules\":[19,20,21,22,23,24,25,26,27],\"inclusive\":false},\"string_doubleq\":{\"rules\":[9,10,11,12,13,14,15,16,17],\"inclusive\":false},\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,18,28,29,30],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = xml_down;\nexports.Parser = xml_down.Parser;\nexports.parse = function () { return xml_down.parse.apply(xml_down, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","\"use strict\";\nvar Ambito_1 = require(\"../model/xml/Ambito/Ambito\");\nvar Global_1 = require(\"../model/xml/Ambito/Global\");\nfunction compile(req) {\n    try {\n        // Datos de la petición desde Angular\n        var xml = req.xml;\n        var xPath = req.query;\n        var grammar_selected = req.grammar;\n        // Gramáticas a usarse según la selección: 1=ascendente, 2=descendente\n        var parser_xml = void 0, parser_xPath = void 0;\n        switch (grammar_selected) {\n            case 1:\n                parser_xml = require('../analyzers/xml_up');\n                parser_xPath = \"require('../analyzers/xpath_up');\";\n                break;\n            case 2:\n                parser_xml = require('../analyzers/xml_down');\n                parser_xPath = \"require('../analyzers/xpath_down);\";\n                break;\n        }\n        // Análisis de XML\n        var xml_ast = parser_xml.parse(xml);\n        if (xml_ast === true || xml_ast.errors.length > 0 || xml_ast.ast === null) {\n            var output_1 = {\n                arreglo_simbolos: [],\n                arreglo_errores: (xml_ast === true ? [{ tipo: \"Sintáctico\", error: \"Sintaxis errónea del documento XML.\", origen: \"XML\", linea: 1, columna: 1 }] : xml_ast.errors),\n                output: \"El documento XML contiene errores para analizar.\\nIntente de nuevo.\"\n            };\n            return output_1;\n        }\n        var xml_parse = xml_ast.ast;\n        var global = new Ambito_1.Ambito(null, \"global\");\n        var cadena = new Global_1.Global(xml_parse, global);\n        var simbolos = cadena.ambito.getArraySymbols();\n        // Análisis de XPath\n        // let xPath_ast = parser_xPath.parse(xPath);\n        // if (xPath_ast.parse === null) {\n        //     let output = {\n        //         arreglo_simbolos: [],\n        //         arreglo_errores: xPath_ast.errors,\n        //         output: \"No se ha podido recuperar del error en las consultas.\\nIntente de nuevo.\"\n        //     }\n        //     res.status(500).send(output);\n        //     return;\n        // }\n        // let xPath_parse = xPath_ast.parse;\n        // let xPath_errors = xPath_ast.errors;\n        console.log(\"Salida:\", xml_ast);\n        var output = {\n            arreglo_simbolos: simbolos,\n            arreglo_errores: [],\n            output: String(xml_parse[0].id_open) //mientras\n        };\n        return output;\n    }\n    catch (error) {\n        console.log(error);\n        var output = {\n            arreglo_simbolos: [],\n            arreglo_errores: [{ tipo: \"Desconocido\", error: \"Error en tiempo de ejecución.\", origen: \"\", linea: \"\", columna: \"\" }],\n            output: String(error)\n        };\n        return output;\n    }\n}\nmodule.exports = { compile: compile };\n","\"use strict\";\nvar Ambito_1 = require(\"./Ambito\");\nfunction exec(_expresiones, _ambito) {\n    _expresiones.forEach(function (element) {\n        if (element.childs) {\n            var nuevoAmbito = new Ambito_1.Ambito(_ambito, \"hijo\");\n            exec(element.childs, nuevoAmbito);\n        }\n        _ambito.addSimbolo(element);\n    });\n}\nmodule.exports = { exec: exec };\n","/* parser generated by jison 0.4.17 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar xml_up = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,6],$V2=[2,6,8],$V3=[1,11],$V4=[11,13],$V5=[1,26],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,27],$Va=[1,34],$Vb=[1,35],$Vc=[2,8],$Vd=[8,9,13,18,19,21],$Ve=[9,11,13];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"ini\":3,\"tk_declaration_xml\":4,\"ROOT\":5,\"EOF\":6,\"XML\":7,\"tk_open\":8,\"tk_id\":9,\"ATTR\":10,\"tk_close\":11,\"CHILD\":12,\"tk_bar\":13,\"CONTENT\":14,\"ATTR_P\":15,\"tk_equal\":16,\"TK_ATTR\":17,\"tk_attribute_d\":18,\"tk_attribute_s\":19,\"PROP\":20,\"anything\":21,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",4:\"tk_declaration_xml\",6:\"EOF\",8:\"tk_open\",9:\"tk_id\",11:\"tk_close\",13:\"tk_bar\",16:\"tk_equal\",18:\"tk_attribute_d\",19:\"tk_attribute_s\",21:\"anything\"},\nproductions_: [0,[3,3],[3,2],[5,2],[5,1],[7,9],[7,9],[7,5],[7,8],[7,2],[7,2],[10,1],[10,0],[15,4],[15,3],[17,1],[17,1],[12,2],[12,1],[14,2],[14,1],[20,1],[20,1],[20,1],[20,1],[20,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n\t\tencoding = new Encoding($$[$0-2]);\n\t\tif (encoding.encoding === encoding.codes.INVALID ) {\n\t\t\terrors.push({ tipo: \"Léxico\", error: \"La codificación del XML no es válida.\", origen: \"XML\", linea: this._$.first_line, columna: this._$.first_column+1 }); return { ast: null, errors: errors };\n\t\t}\n\t\tast = { ast: $$[$0-1], encoding: encoding,  errors: errors };\n\t\terrors = [];\n\t\treturn ast;\n\t\nbreak;\ncase 2:\n errors.push({ tipo: \"Sintáctico\", error: \"Sintaxis errónea del documento XML.\", origen: \"XML\", linea: this._$.first_line, columna: this._$.first_column+1 }); return { ast: null, errors: errors }; \nbreak;\ncase 3:\n if ($$[$0]!==null) { $$[$0-1].push($$[$0]); this.$=$$[$0-1]; } else { this.$=null; } \nbreak;\ncase 4: case 18:\n if ($$[$0]!==null) { this.$=[$$[$0]]; } else { this.$=[]; } \nbreak;\ncase 5:\n\n\t\t\ttag = new Element($$[$0-7], $$[$0-6], null, $$[$0-4], this._$.first_line, this._$.first_column+1, $$[$0-1]);\n            hasConflict = tag.verificateNames();\n\t\t\tif (hasConflict === \"\") {\n\t\t\t\ttag.childs.forEach(child => {\n\t\t\t\t\tchild.father = $$[$0-7];\n            \t});\n\t\t\t\tthis.$ = tag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\terrors.push({ tipo: \"Semántico\", error: hasConflict, origen: \"XML\", linea: _$[$0-1].first_line, columna: _$[$0-1].first_column+1 });\n\t\t\t\tthis.$ = null;\n\t\t\t}\n\t\t\nbreak;\ncase 6:\n\n\t\t\ttag = new Element($$[$0-7], $$[$0-6], $$[$0-4], null, this._$.first_line, this._$.first_column+1, $$[$0-1]);\n            hasConflict = tag.verificateNames();\n\t\t\tif (hasConflict === \"\") {\n\t\t\t\tthis.$ = tag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\terrors.push({ tipo: \"Semántico\", error: hasConflict, origen: \"XML\", linea: _$[$0-1].first_line, columna: _$[$0-1].first_column+1 });\n\t\t\t\tthis.$ = null;\n\t\t\t}\n\t\t\nbreak;\ncase 7:\n\n\t\t\ttag = new Element($$[$0-3], $$[$0-2], null, null, this._$.first_line, this._$.first_column+1, null);\n            hasConflict = tag.verificateNames();\n\t\t\tif (hasConflict === \"\") {\n\t\t\t\tthis.$ = tag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\terrors.push({ tipo: \"Semántico\", error: hasConflict, origen: \"XML\", linea: _$[$0-3].first_line, columna: _$[$0-3].first_column+1 });\n\t\t\t\tthis.$ = null;\n\t\t\t}\n\t\t\nbreak;\ncase 8:\n\n\t\t\ttag = new Element($$[$0-6], $$[$0-5], null, null, this._$.first_line, this._$.first_column+1, $$[$0-1]);\n            hasConflict = tag.verificateNames();\n\t\t\tif (hasConflict === \"\") {\n\t\t\t\tthis.$ = tag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\terrors.push({ tipo: \"Semántico\", error: hasConflict, origen: \"XML\", linea: _$[$0-1].first_line, columna: _$[$0-1].first_column+1 });\n\t\t\t\tthis.$ = null;\n\t\t\t}\n\t\t\nbreak;\ncase 9: case 10:\n errors.push({ tipo: \"Sintáctico\", error: \"La etiqueta no fue declarada correctamente.\", origen: \"XML\", linea: this._$.first_line, columna: this._$.first_column+1 }); this.$ = null; \nbreak;\ncase 11: case 15: case 16: case 21: case 22: case 23: case 24: case 25:\n this.$=$$[$0]; \nbreak;\ncase 12:\n this.$=null; \nbreak;\ncase 13:\n\n\t\tattr = new Atributo($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1);\n\t\t$$[$0-3].push(attr);\n\t\tthis.$=$$[$0-3];\n\t\nbreak;\ncase 14:\n\n\t\tattr = new Atributo($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1);\n\t\tthis.$=[attr];\n\t\nbreak;\ncase 17:\n if ($$[$0]!==null) { $$[$0-1].push($$[$0]); } this.$=$$[$0-1]; \nbreak;\ncase 19:\n\n\t\t$$[$0-1]+=' '+$$[$0];\n\t\tthis.$=$$[$0-1];\n\t\nbreak;\ncase 20:\n\n\t\tthis.$=$$[$0];\n\t\nbreak;\n}\n},\ntable: [{2:[1,3],3:1,4:[1,2]},{1:[3]},{2:$V0,5:4,7:5,8:$V1},{6:[1,8]},{2:$V0,6:[1,9],7:10,8:$V1},o($V2,[2,4]),{9:$V3},{8:[1,13],11:[1,12]},{1:[2,2]},{1:[2,1]},o($V2,[2,3]),o($V4,[2,12],{10:14,15:15,9:[1,16]}),o($V2,[2,9]),o($V2,[2,10]),{11:[1,17],13:[1,18]},o($V4,[2,11],{9:[1,19]}),{16:[1,20]},{2:$V0,7:24,8:[1,23],9:$V5,12:21,13:$V6,14:22,18:$V7,19:$V8,20:25,21:$V9},{11:[1,31]},{16:[1,32]},{17:33,18:$Va,19:$Vb},{2:$V0,7:37,8:[1,36]},{8:[1,38],9:$V5,13:$V6,18:$V7,19:$V8,20:39,21:$V9},{9:$V3,13:[1,40]},o($Vc,[2,18]),o($Vd,[2,20]),o($Vd,[2,21]),o($Vd,[2,22]),o($Vd,[2,23]),o($Vd,[2,24]),o($Vd,[2,25]),o($V2,[2,7]),{17:41,18:$Va,19:$Vb},o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),{9:$V3,13:[1,42]},o($Vc,[2,17]),{13:[1,43]},o($Vd,[2,19]),{9:[1,44]},o($Ve,[2,13]),{9:[1,45]},{9:[1,46]},{11:[1,47]},{11:[1,48]},{11:[1,49]},o($V2,$Vc),o($V2,[2,5]),o($V2,[2,6])],\ndefaultActions: {8:[2,2],9:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        function _parseError (msg, hash) {\n            this.message = msg;\n            this.hash = hash;\n        }\n        _parseError.prototype = Error;\n\n        throw new _parseError(str, hash);\n    }\n},\nparse: function parse (input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\n\tvar attribute = '';\n\tvar errors = [];\n\n\tconst { Atributo } = require('../model/xml/Atributo');\n\tconst { Element } = require('../model/xml/Element');\n\tconst { Encoding } = require('../model/xml/Encoding/Encoding');\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"case-insensitive\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:// Whitespace\nbreak;\ncase 1:// MultiLineComment\nbreak;\ncase 2:return 4\nbreak;\ncase 3:return 8\nbreak;\ncase 4:return 11\nbreak;\ncase 5:return 13\nbreak;\ncase 6:return 16\nbreak;\ncase 7:return 9\nbreak;\ncase 8: attribute = ''; this.begin(\"string_doubleq\"); \nbreak;\ncase 9: attribute += yy_.yytext; \nbreak;\ncase 10: attribute += \"\\\"\"; \nbreak;\ncase 11: attribute += \"\\n\"; \nbreak;\ncase 12: attribute += \" \";  \nbreak;\ncase 13: attribute += \"\\t\"; \nbreak;\ncase 14: attribute += \"\\\\\"; \nbreak;\ncase 15: attribute += \"\\'\"; \nbreak;\ncase 16: attribute += \"\\r\"; \nbreak;\ncase 17: yy_.yytext = attribute; this.popState(); return 18; \nbreak;\ncase 18: attribute = ''; this.begin(\"string_singleq\"); \nbreak;\ncase 19: attribute += yy_.yytext; \nbreak;\ncase 20: attribute += \"\\\"\"; \nbreak;\ncase 21: attribute += \"\\n\"; \nbreak;\ncase 22: attribute += \" \";  \nbreak;\ncase 23: attribute += \"\\t\"; \nbreak;\ncase 24: attribute += \"\\\\\"; \nbreak;\ncase 25: attribute += \"\\'\"; \nbreak;\ncase 26: attribute += \"\\r\"; \nbreak;\ncase 27: yy_.yytext = attribute; this.popState(); console.log(\"AAAAAAa\"); return 19; \nbreak;\ncase 28:return 6\nbreak;\ncase 29:return 21\nbreak;\ncase 30: errors.push({ tipo: \"Léxico\", error: yy_.yytext, origen: \"XML\", linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; \nbreak;\n}\n},\nrules: [/^(?:\\s+)/i,/^(?:<!--[\\s\\S\\n]*?-->)/i,/^(?:<\\?xml[\\s\\S\\n]*?\\?>)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\\/)/i,/^(?:=)/i,/^(?:[\\w\\u00e1\\u00e9\\u00ed\\u00f3\\u00fa\\u00c1\\u00c9\\u00cd\\u00d3\\u00da\\u00f1\\u00d1]+)/i,/^(?:[\"])/i,/^(?:[^\"\\\\]+)/i,/^(?:\\\\\")/i,/^(?:\\\\n)/i,/^(?:\\s)/i,/^(?:\\\\t)/i,/^(?:\\\\\\\\)/i,/^(?:\\\\\\\\')/i,/^(?:\\\\r)/i,/^(?:[\"])/i,/^(?:['])/i,/^(?:[^'\\\\]+)/i,/^(?:\\\\\")/i,/^(?:\\\\n)/i,/^(?:\\s)/i,/^(?:\\\\t)/i,/^(?:\\\\\\\\)/i,/^(?:\\\\\\\\')/i,/^(?:\\\\r)/i,/^(?:['])/i,/^(?:$)/i,/^(?:[^><]+)/i,/^(?:.)/i],\nconditions: {\"string_singleq\":{\"rules\":[19,20,21,22,23,24,25,26,27],\"inclusive\":false},\"string_doubleq\":{\"rules\":[9,10,11,12,13,14,15,16,17],\"inclusive\":false},\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,18,28,29,30],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = xml_up;\nexports.Parser = xml_up.Parser;\nexports.parse = function () { return xml_up.parse.apply(xml_up, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Atributo = void 0;\nvar Atributo = /** @class */ (function () {\n    function Atributo(id, value, line, column) {\n        this.id = id;\n        this.value = value;\n        this.line = line;\n        this.column = column;\n    }\n    return Atributo;\n}());\nexports.Atributo = Atributo;\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}