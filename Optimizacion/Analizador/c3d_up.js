/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c3d_up = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[6,28],$V2=[1,41],$V3=[1,40],$V4=[1,38],$V5=[1,39],$V6=[1,37],$V7=[1,36],$V8=[1,30],$V9=[1,35],$Va=[1,33],$Vb=[1,34],$Vc=[1,32],$Vd=[1,45],$Ve=[1,46],$Vf=[1,47],$Vg=[1,48],$Vh=[16,21,22,23,26,29,35,37,46,47,48,53],$Vi=[35,37],$Vj=[1,81],$Vk=[1,76],$Vl=[1,80],$Vm=[1,74],$Vn=[1,75],$Vo=[1,78],$Vp=[1,77],$Vq=[1,85],$Vr=[1,84],$Vs=[1,86],$Vt=[1,94],$Vu=[1,91],$Vv=[1,92],$Vw=[1,93],$Vx=[20,25],$Vy=[20,52,68,69,70,71],$Vz=[9,11,31,57,58,59,60],$VA=[16,18,21,22,23,26,52],$VB=[18,26,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"HEAD":4,"L_FUN":5,"EOF":6,"tk_numeral":7,"tk_include":8,"tk_menor":9,"tk_stdio":10,"tk_mayor":11,"L_VR":12,"G_TMP":13,"VR":14,"tk_float":15,"tk_heap":16,"tk_corA":17,"num":18,"tk_corC":19,"tk_ptcoma":20,"tk_stack":21,"tk_sp":22,"tk_hp":23,"L_TMP":24,"tk_coma":25,"temporal":26,"FUN":27,"tk_void":28,"tk_id":29,"tk_ParA":30,"tk_ParC":31,"tk_LlaveA":32,"L_SEN":33,"L_ET":34,"tk_LlaveC":35,"ET":36,"label":37,"tk_2puntos":38,"SEN":39,"ASIG":40,"IF":41,"GO":42,"PRT":43,"RET":44,"CALL":45,"tk_return":46,"tk_goto":47,"tk_printf":48,"tk_attribute_d":49,"VALP":50,"tk_int":51,"tk_menos":52,"tk_if":53,"COND":54,"VALI":55,"RELA":56,"tk_igual2":57,"tk_diferent":58,"tk_mayorigual":59,"tk_menorigual":60,"TG":61,"tk_equal":62,"EXP":63,"INDEX":64,"EXPNUM":65,"VALO":66,"ARI":67,"tk_mas":68,"tk_por":69,"tk_div":70,"tk_mod":71,"STR":72,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"tk_numeral",8:"tk_include",9:"tk_menor",10:"tk_stdio",11:"tk_mayor",15:"tk_float",16:"tk_heap",17:"tk_corA",18:"num",19:"tk_corC",20:"tk_ptcoma",21:"tk_stack",22:"tk_sp",23:"tk_hp",25:"tk_coma",26:"temporal",28:"tk_void",29:"tk_id",30:"tk_ParA",31:"tk_ParC",32:"tk_LlaveA",35:"tk_LlaveC",37:"label",38:"tk_2puntos",46:"tk_return",47:"tk_goto",48:"tk_printf",49:"tk_attribute_d",51:"tk_int",52:"tk_menos",53:"tk_if",57:"tk_igual2",58:"tk_diferent",59:"tk_mayorigual",60:"tk_menorigual",62:"tk_equal",68:"tk_mas",69:"tk_por",70:"tk_div",71:"tk_mod"},
productions_: [0,[3,3],[4,7],[12,2],[12,1],[14,6],[14,6],[14,3],[14,3],[13,3],[24,3],[24,1],[5,2],[5,1],[27,8],[27,7],[27,7],[34,2],[34,1],[36,3],[36,2],[33,2],[33,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[44,2],[45,4],[42,3],[43,7],[50,1],[50,4],[50,1],[50,2],[41,7],[54,3],[55,1],[55,1],[55,2],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[40,4],[61,1],[61,1],[61,1],[61,4],[61,4],[64,1],[64,1],[64,4],[64,4],[64,1],[63,1],[63,1],[65,3],[67,1],[67,1],[67,1],[67,1],[67,1],[66,1],[66,1],[66,1],[66,2],[66,1],[66,1],[72,4],[72,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    this.$ = new Nodo(id++, 'Inicio', '');
    this.$.NuevoHijo($$[$0-2]);
    let funciones = new Nodo(id++, 'L_FUN', '');
    for(let i=0; i < $$[$0-1].length; i++){
        funciones.NuevoHijo($$[$0-1][i]);
    }
    this.$.NuevoHijo(funciones);
    //this.$.imprimir();
    let g = new Grafica();
    g.Graficar(this.$);
    codigo = g.conte;
    console.log('fin del archivo');
    return codigo;
    
break;
case 2:

        this.$ = new Nodo(id++, 'HEAD', '');
        $$[$0-6] = new Nodo(id++, 'tk_numeral', '#'); this.$.NuevoHijo($$[$0-6]);
        $$[$0-5] = new Nodo(id++, 'tk_include', 'include'); this.$.NuevoHijo($$[$0-5]);
        $$[$0-4] = new Nodo(id++, 'tk_menor', '<'); this.$.NuevoHijo($$[$0-4]);
        $$[$0-3] = new Nodo(id++, 'tk_stdio', 'stdio.h'); this.$.NuevoHijo($$[$0-3]);
        $$[$0-2] = new Nodo(id++, 'tk_mayor', '>'); this.$.NuevoHijo($$[$0-2]);
        let lvr = new Nodo(id++, 'L_VR', '');
        for(let i=0; i<$$[$0-1].length; i++){
            lvr.NuevoHijo($$[$0-1][i]);
        }
        this.$.NuevoHijo(lvr);
        this.$.NuevoHijo($$[$0]);
    
break;
case 3: case 12: case 17: case 21:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4:
this.$ = [$$[$0]];
break;
case 5:
this.$ = new Nodo(id++, 'VR', '');
        $$[$0-5] = new Nodo(id++, 'tk_float', 'float'); this.$.NuevoHijo($$[$0-5]);
        $$[$0-4] = new Nodo(id++, 'tk_heap', 'Heap'); this.$.NuevoHijo($$[$0-4]);
        $$[$0-3] = new Nodo(id++, 'tk_corA', '['); this.$.NuevoHijo($$[$0-3]);
        num1 = new Nodo(id++, 'num', $$[$0-2]); this.$.NuevoHijo(num1);
        $$[$0-1] = new Nodo(id++, 'tk_corC', ']'); this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_ptcoma', ';'); this.$.NuevoHijo($$[$0]);
    
break;
case 6:
this.$ = new Nodo(id++, 'VR', '');
        $$[$0-5] = new Nodo(id++, 'tk_float', 'float'); this.$.NuevoHijo($$[$0-5]);
        $$[$0-4] = new Nodo(id++, 'tk_stack', 'Stack'); this.$.NuevoHijo($$[$0-4]);
        $$[$0-3] = new Nodo(id++, 'tk_corA', '['); this.$.NuevoHijo($$[$0-3]);
        num1 = new Nodo(id++, 'num', $$[$0-2]); this.$.NuevoHijo(num1);
        $$[$0-1] = new Nodo(id++, 'tk_corC', ']'); this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_ptcoma', ';'); this.$.NuevoHijo($$[$0]);
    
break;
case 7:
 this.$ = new Nodo(id++, 'VR', '');
        $$[$0-2] = new Nodo(id++, 'tk_float', 'float'); this.$.NuevoHijo($$[$0-2]);
        $$[$0-1] = new Nodo(id++, 'tk_sp', 'SP'); this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_ptcoma', ';'); this.$.NuevoHijo($$[$0]);
    
break;
case 8:
 this.$ = new Nodo(id++, 'VR', '');
        $$[$0-2] = new Nodo(id++, 'tk_float', 'float'); this.$.NuevoHijo($$[$0-2]);
        $$[$0-1] = new Nodo(id++, 'tk_hp', 'HP'); this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_ptcoma', ';'); this.$.NuevoHijo($$[$0]);
    
break;
case 9:
 this.$ = new Nodo(id++, 'G_TMP', ''); 
        $$[$0-2] = new Nodo(id++, 'tk_float', 'float'); this.$.NuevoHijo($$[$0-2]);
        let ltmp = new Nodo(id++, 'L_TMP', '');
        for(let i=0; i<$$[$0-1].length; i++){
            ltmp.NuevoHijo($$[$0-1][i]);
        }
        this.$.NuevoHijo(ltmp);
        $$[$0] = new Nodo(id++, 'tk_ptcoma', ';'); this.$.NuevoHijo($$[$0]);
    
break;
case 10:
let com = new Nodo(id++, 'tk_coma', ','); $$[$0-2].push(com);
            tem = new Nodo(id++, 'temporal', $$[$0]); $$[$0-2].push(tem); this.$ = $$[$0-2];
        
break;
case 11:
 tem = new Nodo(id++, 'temporal', $$[$0]); this.$ = [tem];
break;
case 13: case 18: case 22:
this.$ = [$$[$0]]
break;
case 14:
this.$ = new Nodo(id++, 'FUN', '');
            $$[$0-7] = new Nodo(id++, 'tk_void', 'void'); this.$.NuevoHijo($$[$0-7]);
            tkid = new Nodo(id++, 'tk_id', $$[$0-6]); this.$.NuevoHijo(tkid);
            $$[$0-5] = new Nodo(id++, 'tk_ParA', '('); this.$.NuevoHijo($$[$0-5]);
            $$[$0-4] = new Nodo(id++, 'tk_ParC', ')'); this.$.NuevoHijo($$[$0-4]);
            $$[$0-3] = new Nodo(id++, 'tk_LlaveA', '{'); this.$.NuevoHijo($$[$0-3]);
            lsen = new Nodo(id++, 'L_SEN', '');
            for(let i=0; i<$$[$0-2].length; i++){
                lsen.NuevoHijo($$[$0-2][i]);
            }
            this.$.NuevoHijo(lsen);
            l_et = new Nodo(id++, 'L_ET', '');
            for(let i=0; i<$$[$0-1].length; i++){
                l_et.NuevoHijo($$[$0-1][i]);
            }
            this.$.NuevoHijo(l_et);
            $$[$0] = new Nodo(id++, 'tk_LlaveC', '}'); this.$.NuevoHijo($$[$0]);
        
break;
case 15:
this.$ = new Nodo(id++, 'FUN', '');
            $$[$0-6] = new Nodo(id++, 'tk_void', 'void'); this.$.NuevoHijo($$[$0-6]);
            tkid = new Nodo(id++, 'tk_id', $$[$0-5]); this.$.NuevoHijo(tkid);
            $$[$0-4] = new Nodo(id++, 'tk_ParA', '('); this.$.NuevoHijo($$[$0-4]);
            $$[$0-3] = new Nodo(id++, 'tk_ParC', ')'); this.$.NuevoHijo($$[$0-3]);
            $$[$0-2] = new Nodo(id++, 'tk_LlaveA', '{'); this.$.NuevoHijo($$[$0-2]);
            l_et = new Nodo(id++, 'L_ET', '');
            for(let i=0; i<$$[$0-1].length; i++){
                l_et.NuevoHijo($$[$0-1][i]);
            }
            this.$.NuevoHijo(l_et);
            $$[$0] = new Nodo(id++, 'tk_LlaveC', '}'); this.$.NuevoHijo($$[$0]);
        
break;
case 16:
this.$ = new Nodo(id++, 'FUN', '');
            $$[$0-6] = new Nodo(id++, 'tk_void', 'void'); this.$.NuevoHijo($$[$0-6]);
            tkid = new Nodo(id++, 'tk_id', $$[$0-5]); this.$.NuevoHijo(tkid);
            $$[$0-4] = new Nodo(id++, 'tk_ParA', '('); this.$.NuevoHijo($$[$0-4]);
            $$[$0-3] = new Nodo(id++, 'tk_ParC', ')'); this.$.NuevoHijo($$[$0-3]);
            $$[$0-2] = new Nodo(id++, 'tk_LlaveA', '{'); this.$.NuevoHijo($$[$0-2]);
            lsen = new Nodo(id++, 'L_SEN', '');
            for(let i=0; i<$$[$0-1].length; i++){
                lsen.NuevoHijo($$[$0-1][i]);
            }
            this.$.NuevoHijo(lsen);
            $$[$0] = new Nodo(id++, 'tk_LlaveC', '}'); this.$.NuevoHijo($$[$0]);
        
break;
case 19:
this.$ = new Nodo(id++, 'ET', '');
            labe = new Nodo(id++, 'label', $$[$0-2]); this.$.NuevoHijo(labe);
            $$[$0-1] = new Nodo(id++, 'tk_2puntos', ':'); this.$.NuevoHijo($$[$0-1]);
            lsen = new Nodo(id++, 'L_SEN', '');
            for(let i=0; i<$$[$0].length; i++){
                lsen.NuevoHijo($$[$0][i]);
            }
            this.$.NuevoHijo(lsen);
        
break;
case 20:
this.$ = new Nodo(id++, 'ET', '');
            labe = new Nodo(id++, 'label', $$[$0-1]); this.$.NuevoHijo(labe);
            $$[$0] = new Nodo(id++, 'tk_2puntos', ':'); this.$.NuevoHijo($$[$0]);
        
break;
case 23: case 24: case 25: case 26: case 27: case 28:
this.$ = new Nodo(id++, 'SEN', ''); this.$.NuevoHijo($$[$0]);
break;
case 29:
this.$ = new Nodo(id++, 'RET', '');
        $$[$0-1] = new Nodo(id++, 'tk_return', 'return'); this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_ptcoma', ';'); this.$.NuevoHijo($$[$0]);
    
break;
case 30:
 this.$ = new Nodo(id++, 'CALL', '');
        tkid = new Nodo(id++, 'tk_id', $$[$0-3]); this.$.NuevoHijo(tkid);
        $$[$0-2] = new Nodo(id++, 'tk_ParA', '('); this.$.NuevoHijo($$[$0-2]);
        $$[$0-1] = new Nodo(id++, 'tk_ParC', ')'); this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_ptcoma', ';'); this.$.NuevoHijo($$[$0]);
    
break;
case 31:
this.$ = new Nodo(id++, 'GO', '');
        $$[$0-2] = new Nodo(id++, 'tk_goto', 'goto'); this.$.NuevoHijo($$[$0-2]);
        labe = new Nodo(id++, 'label', $$[$0-1]); this.$.NuevoHijo(labe);
        $$[$0] = new Nodo(id++, 'tk_ptcoma', ';'); this.$.NuevoHijo($$[$0]);
    
break;
case 32:
this.$ = new Nodo(id++, 'PRT', '');
        $$[$0-6] = new Nodo(id++, 'tk_printf', 'printf'); this.$.NuevoHijo($$[$0-6]);
        $$[$0-5] = new Nodo(id++, 'tk_ParA', '('); this.$.NuevoHijo($$[$0-5]);
        let attriD = new Nodo(id++, 'tk_attribute_d', $$[$0-4]); this.$.NuevoHijo($$[$0-4]);
        $$[$0-3] = new Nodo(id++, 'tk_coma', ','); this.$.NuevoHijo($$[$0-3]);
        this.$.NuevoHijo($$[$0-2]);
        $$[$0-1] = new Nodo(id++, 'tk_ParC', ')'); this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_ParA', ';'); this.$.NuevoHijo($$[$0]);

    
break;
case 33:
this.$ = new Nodo(id++, 'VALP', '');
        tem = new Nodo(id++, 'temporal', $$[$0]); this.$.NuevoHijo(tem);
    
break;
case 34:
this.$ = new Nodo(id++, 'VALP', '');
        $$[$0-3] = new Nodo(id++, 'tk_ParA', '('); this.$.NuevoHijo($$[$0-3]);
        $$[$0-2] = new Nodo(id++, 'tk_int', 'int'); this.$.NuevoHijo($$[$0-2]);
        $$[$0-1] = new Nodo(id++, 'tk_ParC', ')'); this.$.NuevoHijo($$[$0-1]);
        tem = new Nodo(id++, 'temporal', $$[$0]); this.$.NuevoHijo(tem);
    
break;
case 35:
this.$ = new Nodo(id++, 'VALP', '');
        num1 = new Nodo(id++, 'num', $$[$0]); this.$.NuevoHijo(num1);
    
break;
case 36:
this.$ = new Nodo(id++, 'VALP', '');
        $$[$0-1] = new Nodo(id++, 'tk_menos', '-'); this.$.NuevoHijo($$[$0-1]);
        num1 = new Nodo(id++, 'num', $$[$0]); this.$.NuevoHijo(num1);
    
break;
case 37:
this.$ = new Nodo(id++, 'IF', '');
        $$[$0-6] = new Nodo(id++, 'tk_if', 'if'); this.$.NuevoHijo($$[$0-6]);
        $$[$0-5] = new Nodo(id++, 'tk_ParA', '('); this.$.NuevoHijo($$[$0-5]);
        this.$.NuevoHijo($$[$0-4]);
        $$[$0-3] = new Nodo(id++, 'tk_ParC', ')'); this.$.NuevoHijo($$[$0-3]);
        $$[$0-2] = new Nodo(id++, 'tk_goto', 'goto'); this.$.NuevoHijo($$[$0-2]);
        labe = new Nodo(id++, 'label', $$[$0-1]); this.$.NuevoHijo(labe);
        $$[$0] = new Nodo(id++, 'tk_ptcoma', ';'); this.$.NuevoHijo($$[$0]);
    
break;
case 38:
this.$ = new Nodo(id++, 'COND', '');
        this.$.NuevoHijo($$[$0-2]);
        this.$.NuevoHijo($$[$0-1]);
        this.$.NuevoHijo($$[$0]);
    
break;
case 39:
this.$ = new Nodo(id++, 'VALI', '');
        tem = new Nodo(id++, 'temporal', $$[$0]); this.$.NuevoHijo(tem);
    
break;
case 40:
this.$ = new Nodo(id++, 'VALI', '');
        num1 = new Nodo(id++, 'num', $$[$0]); this.$.NuevoHijo(num1);
    
break;
case 41:
this.$ = new Nodo(id++, 'VALI', '');
        $$[$0-1] = new Nodo(id++, 'tk_menos', '-'); this.$.NuevoHijo($$[$0-1]);
        num1 = new Nodo(id++, 'num', $$[$0]); this.$.NuevoHijo(num1);
    
break;
case 42:
this.$ = new Nodo(id++, 'RELA', '');
        $$[$0] = new Nodo(id++, 'tk_igual2', '=='); this.$.NuevoHijo($$[$0]);
    
break;
case 43:
this.$ = new Nodo(id++, 'RELA', '');
        $$[$0] = new Nodo(id++, 'tk_diferent', '!='); this.$.NuevoHijo($$[$0]);
    
break;
case 44:
this.$ = new Nodo(id++, 'RELA', '');
        $$[$0] = new Nodo(id++, 'tk_mayorigual', '>='); this.$.NuevoHijo($$[$0]);
    
break;
case 45:
this.$ = new Nodo(id++, 'RELA', '');
        $$[$0] = new Nodo(id++, 'tk_menorigual', '<='); this.$.NuevoHijo($$[$0]);
    
break;
case 46:
this.$ = new Nodo(id++, 'RELA', '');
        $$[$0] = new Nodo(id++, 'tk_mayor', '>'); this.$.NuevoHijo($$[$0]);
    
break;
case 47:
this.$ = new Nodo(id++, 'RELA', '');
        $$[$0] = new Nodo(id++, 'tk_menor', '<'); this.$.NuevoHijo($$[$0]);
    
break;
case 48:
this.$ = new Nodo(id++, 'ASIG', '');
        this.$.NuevoHijo($$[$0-3]); 
        $$[$0-2] = new Nodo(id++, 'tk_equal', '='); this.$.NuevoHijo($$[$0-2]);
        this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_ptcoma', ';'); this.$.NuevoHijo($$[$0]);
    
break;
case 49:
this.$ = new Nodo(id++, 'TG', '');
        tem = new Nodo(id++, 'temporal', $$[$0]); this.$.NuevoHijo(tem);
    
break;
case 50:
this.$ = new Nodo(id++, 'TG', '');
        $$[$0] = new Nodo(id++, 'tk_sp', 'SP'); this.$.NuevoHijo($$[$0]);
    
break;
case 51:
this.$ = new Nodo(id++, 'TG', '');
        $$[$0] = new Nodo(id++, 'tk_hp', 'HP'); this.$.NuevoHijo($$[$0]);
    
break;
case 52:
this.$ = new Nodo(id++, 'TG', '');
        $$[$0-3] = new Nodo(id++, 'tk_stack', 'Stack'); this.$.NuevoHijo($$[$0-3]);
        $$[$0-2] = new Nodo(id++, 'tk_corA', '['); this.$.NuevoHijo($$[$0-2]);
        this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_corC', ']'); this.$.NuevoHijo($$[$0]);
    
break;
case 53:
this.$ = new Nodo(id++, 'TG', '');
        $$[$0-3] = new Nodo(id++, 'tk_heap', 'HEAP'); this.$.NuevoHijo($$[$0-3]);
        $$[$0-2] = new Nodo(id++, 'tk_corA', '['); this.$.NuevoHijo($$[$0-2]);
        this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_corC', ']'); this.$.NuevoHijo($$[$0]);
    
break;
case 54:
this.$ = new Nodo(id++, 'INDEX', '');
        $$[$0] = new Nodo(id++, 'tk_sp', 'SP'); this.$.NuevoHijo($$[$0]);
    
break;
case 55:
this.$ = new Nodo(id++, 'INDEX', '');
        $$[$0] = new Nodo(id++, 'tk_hp', 'HP'); this.$.NuevoHijo($$[$0]);
    
break;
case 56:
this.$ = new Nodo(id++, 'INDEX', '');
        $$[$0-3] = new Nodo(id++, 'tk_ParA', '('); this.$.NuevoHijo($$[$0-3]);
        $$[$0-2] = new Nodo(id++, 'tk_int', 'int'); this.$.NuevoHijo($$[$0-2]);
        $$[$0-1] = new Nodo(id++, 'tk_ParC', ')'); this.$.NuevoHijo($$[$0-1]);
        tem = new Nodo(id++, 'temporal', $$[$0]); this.$.NuevoHijo(tem);
    
break;
case 57:
this.$ = new Nodo(id++, 'INDEX', '');
        $$[$0-3] = new Nodo(id++, 'tk_ParA', '('); this.$.NuevoHijo($$[$0-3]);
        $$[$0-2] = new Nodo(id++, 'tk_int', 'int'); this.$.NuevoHijo($$[$0-2]);
        $$[$0-1] = new Nodo(id++, 'tk_ParC', ')'); this.$.NuevoHijo($$[$0-1]);
        num1 = new Nodo(id++, 'num', $$[$0]); this.$.NuevoHijo(num1);
    
break;
case 58:
this.$ = new Nodo(id++, 'INDEX', '');
        num1 = new Nodo(id++, 'num', $$[$0]); this.$.NuevoHijo(num1);
    
break;
case 59: case 60:
this.$ = new Nodo(id++, 'EXP', '');
        this.$.NuevoHijo($$[$0]);
    
break;
case 61:
this.$ = new Nodo(id++, 'EXPNUM', '');
        this.$.NuevoHijo($$[$0-2]);
        this.$.NuevoHijo($$[$0-1]);
        this.$.NuevoHijo($$[$0]);
    
break;
case 62:
this.$ = new Nodo(id++, 'ARI', '');
        $$[$0] = new Nodo(id++, 'tk_mas', '+'); this.$.NuevoHijo($$[$0]);
    
break;
case 63:
this.$ = new Nodo(id++, 'ARI', '');
        $$[$0] = new Nodo(id++, 'tk_menos', '-'); this.$.NuevoHijo($$[$0]);
    
break;
case 64:
this.$ = new Nodo(id++, 'ARI', '');
        $$[$0] = new Nodo(id++, 'tk_por', '*'); this.$.NuevoHijo($$[$0]);
    
break;
case 65:
this.$ = new Nodo(id++, 'ARI', '');
        $$[$0] = new Nodo(id++, 'tk_div', '/'); this.$.NuevoHijo($$[$0]);
    
break;
case 66:
this.$ = new Nodo(id++, 'ARI', '');
        $$[$0] = new Nodo(id++, 'tk_mod', '%'); this.$.NuevoHijo($$[$0]);
    
break;
case 67:
this.$ = new Nodo(id++, 'VALO', '');
        $$[$0] = new Nodo(id++, 'tk_sp', 'SP'); this.$.NuevoHijo($$[$0]);
    
break;
case 68:
this.$ = new Nodo(id++, 'VALO', '');
        $$[$0] = new Nodo(id++, 'tk_hp', 'HP'); this.$.NuevoHijo($$[$0]);
    
break;
case 69:
this.$ = new Nodo(id++, 'VALO', '');
        num1 = new Nodo(id++, 'num', $$[$0]); this.$.NuevoHijo(num1);
    
break;
case 70:
this.$ = new Nodo(id++, 'VALO', '');
        $$[$0-1] = new Nodo(id++, 'tk_menos', '-');
        num1 = new Nodo(id++, 'num', $$[$0]); this.$.NuevoHijo(num1);
    
break;
case 71:
this.$ = new Nodo(id++, 'VALO', '');
        tem = new Nodo(id++, 'num', $$[$0]); this.$.NuevoHijo(tem);
    
break;
case 72:
this.$ = new Nodo(id++, 'VALO', '');
        this.$.NuevoHijo(num1);
    
break;
case 73:
this.$ = new Nodo(id++, 'STR', '');
        $$[$0-3] = new Nodo(id++, 'tk_stack', 'Stack'); this.$.NuevoHijo($$[$0-3]);
        $$[$0-2] = new Nodo(id++, 'tk_corA', '['); this.$.NuevoHijo($$[$0-2]);
        this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_corC', ']'); this.$.NuevoHijo($$[$0]);
    
break;
case 74:
this.$ = new Nodo(id++, 'STR', '');
        $$[$0-3] = new Nodo(id++, 'tk_heap', 'Heap'); this.$.NuevoHijo($$[$0-3]);
        $$[$0-2] = new Nodo(id++, 'tk_corA', '['); this.$.NuevoHijo($$[$0-2]);
        this.$.NuevoHijo($$[$0-1]);
        $$[$0] = new Nodo(id++, 'tk_corC', ']'); this.$.NuevoHijo($$[$0]);
    
break;
}
},
table: [{3:1,4:2,7:[1,3]},{1:[3]},{5:4,27:5,28:$V0},{8:[1,7]},{6:[1,8],27:9,28:$V0},o($V1,[2,13]),{29:[1,10]},{9:[1,11]},{1:[2,1]},o($V1,[2,12]),{30:[1,12]},{10:[1,13]},{31:[1,14]},{11:[1,15]},{32:[1,16]},{12:17,14:18,15:[1,19]},{16:$V2,21:$V3,22:$V4,23:$V5,26:$V6,29:$V7,33:20,34:21,36:23,37:$V8,39:22,40:24,41:25,42:26,43:27,44:28,45:29,46:$V9,47:$Va,48:$Vb,53:$Vc,61:31},{13:42,14:43,15:[1,44]},{15:[2,4]},{16:$Vd,21:$Ve,22:$Vf,23:$Vg},{16:$V2,21:$V3,22:$V4,23:$V5,26:$V6,29:$V7,34:49,35:[1,50],36:23,37:$V8,39:51,40:24,41:25,42:26,43:27,44:28,45:29,46:$V9,47:$Va,48:$Vb,53:$Vc,61:31},{35:[1,52],36:53,37:$V8},o($Vh,[2,22]),o($Vi,[2,18]),o($Vh,[2,23]),o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,[2,28]),{38:[1,54]},{62:[1,55]},{30:[1,56]},{37:[1,57]},{30:[1,58]},{20:[1,59]},{30:[1,60]},{62:[2,49]},{62:[2,50]},{62:[2,51]},{17:[1,61]},{17:[1,62]},{28:[2,2]},{15:[2,3]},{16:$Vd,21:$Ve,22:$Vf,23:$Vg,24:63,26:[1,64]},{17:[1,65]},{17:[1,66]},{20:[1,67]},{20:[1,68]},{35:[1,69],36:53,37:$V8},o($V1,[2,16]),o($Vh,[2,21]),o($V1,[2,15]),o($Vi,[2,17]),o($Vi,[2,20],{39:22,40:24,41:25,42:26,43:27,44:28,45:29,61:31,33:70,16:$V2,21:$V3,22:$V4,23:$V5,26:$V6,29:$V7,46:$V9,47:$Va,48:$Vb,53:$Vc}),{16:$Vj,18:$Vk,21:$Vl,22:$Vm,23:$Vn,26:$Vo,52:$Vp,63:71,65:72,66:73,72:79},{18:$Vq,26:$Vr,52:$Vs,54:82,55:83},{20:[1,87]},{49:[1,88]},o($Vh,[2,29]),{31:[1,89]},{18:$Vt,22:$Vu,23:$Vv,30:$Vw,64:90},{18:$Vt,22:$Vu,23:$Vv,30:$Vw,64:95},{20:[1,96],25:[1,97]},o($Vx,[2,11]),{18:[1,98]},{18:[1,99]},{15:[2,7]},{15:[2,8]},o($V1,[2,14]),o($Vi,[2,19],{40:24,41:25,42:26,43:27,44:28,45:29,61:31,39:51,16:$V2,21:$V3,22:$V4,23:$V5,26:$V6,29:$V7,46:$V9,47:$Va,48:$Vb,53:$Vc}),{20:[1,100]},{20:[2,59]},{20:[2,60],52:[1,103],67:101,68:[1,102],69:[1,104],70:[1,105],71:[1,106]},o($Vy,[2,67]),o($Vy,[2,68]),o($Vy,[2,69]),{18:[1,107]},o($Vy,[2,71]),o($Vy,[2,72]),{17:[1,108]},{17:[1,109]},{31:[1,110]},{9:[1,117],11:[1,116],56:111,57:[1,112],58:[1,113],59:[1,114],60:[1,115]},o($Vz,[2,39]),o($Vz,[2,40]),{18:[1,118]},o($Vh,[2,31]),{25:[1,119]},{20:[1,120]},{19:[1,121]},{19:[2,54]},{19:[2,55]},{51:[1,122]},{19:[2,58]},{19:[1,123]},{28:[2,9]},{26:[1,124]},{19:[1,125]},{19:[1,126]},o($Vh,[2,48]),{16:$Vj,18:$Vk,21:$Vl,22:$Vm,23:$Vn,26:$Vo,52:$Vp,66:127,72:79},o($VA,[2,62]),o($VA,[2,63]),o($VA,[2,64]),o($VA,[2,65]),o($VA,[2,66]),o($Vy,[2,70]),{18:$Vt,22:$Vu,23:$Vv,30:$Vw,64:128},{18:$Vt,22:$Vu,23:$Vv,30:$Vw,64:129},{47:[1,130]},{18:$Vq,26:$Vr,52:$Vs,55:131},o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($Vz,[2,41]),{18:[1,135],26:[1,133],30:[1,134],50:132,52:[1,136]},o($Vh,[2,30]),{62:[2,52]},{31:[1,137]},{62:[2,53]},o($Vx,[2,10]),{20:[1,138]},{20:[1,139]},{20:[2,61]},{19:[1,140]},{19:[1,141]},{37:[1,142]},{31:[2,38]},{31:[1,143]},{31:[2,33]},{51:[1,144]},{31:[2,35]},{18:[1,145]},{18:[1,147],26:[1,146]},{15:[2,5]},{15:[2,6]},o($Vy,[2,73]),o($Vy,[2,74]),{20:[1,148]},{20:[1,149]},{31:[1,150]},{31:[2,36]},{19:[2,56]},{19:[2,57]},o($Vh,[2,37]),o($Vh,[2,32]),{26:[1,151]},{31:[2,34]}],
defaultActions: {8:[2,1],18:[2,4],37:[2,49],38:[2,50],39:[2,51],42:[2,2],43:[2,3],67:[2,7],68:[2,8],72:[2,59],91:[2,54],92:[2,55],94:[2,58],96:[2,9],121:[2,52],123:[2,53],127:[2,61],131:[2,38],133:[2,33],135:[2,35],138:[2,5],139:[2,6],145:[2,36],146:[2,56],147:[2,57],151:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var attribute = '';
	var errors = [];
	let re = /[^\n\t\r ]+/g
	//let ast = null;
	let grammar_stack = [];


//	const { Objeto } = require('../model/xpath/Objeto');
//	const { Tipos } = require('../model/xpath/Enum');
//	var builder = new Objeto();
const { Nodo } = require('./Optimizacion/AST/Node');
const { Grafica } = require('./Optimizacion/AST/Grafica');
let num1, tem, labe;
let tkid, lsen, l_et;
var id = 0;
let codigo;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Whitespace
break;
case 1:// XPATHComment
break;
case 2:// MultiLineComment
break;
case 3:// Declaration XML
break;
case 4:return 18
break;
case 5:return 26
break;
case 6:return 37
break;
case 7:return 7
break;
case 8:return 60
break;
case 9:return 59
break;
case 10:return 20
break;
case 11:return 25
break;
case 12:return 38
break;
case 13:return 17
break;
case 14:return 19
break;
case 15:return 30
break;
case 16:return 31
break;
case 17:return 32
break;
case 18:return 35
break;
case 19:return 69
break;
case 20:return 68
break;
case 21:return 52
break;
case 22:return 70
break;
case 23:return 57
break;
case 24:return 58
break;
case 25:return 71
break;
case 26:return 9
break;
case 27:return 11
break;
case 28:return 62
break;
case 29:return 8
break;
case 30:return 10
break;
case 31:return 15
break;
case 32:return 28
break;
case 33:return 51
break;
case 34:return 53
break;
case 35:return 47
break;
case 36:return 48
break;
case 37:return 16
break;
case 38:return 21
break;
case 39:return 22
break;
case 40:return 23
break;
case 41:return 46
break;
case 42:return 29
break;
case 43: attribute = ''; this.begin("string_doubleq"); 
break;
case 44: attribute += yy_.yytext; 
break;
case 45: attribute += "\""; 
break;
case 46: attribute += "\n"; 
break;
case 47: attribute += " ";  
break;
case 48: attribute += "\t"; 
break;
case 49: attribute += "\\"; 
break;
case 50: attribute += "\'"; 
break;
case 51: attribute += "\r"; 
break;
case 52: yy_.yytext = attribute; this.popState(); return 49; 
break;
case 53: attribute = ''; this.begin("string_singleq"); 
break;
case 54: attribute += yy_.yytext; 
break;
case 55: attribute += "\""; 
break;
case 56: attribute += "\n"; 
break;
case 57: attribute += " ";  
break;
case 58: attribute += "\t"; 
break;
case 59: attribute += "\\"; 
break;
case 60: attribute += "\'"; 
break;
case 61: attribute += "\r"; 
break;
case 62: yy_.yytext = attribute; this.popState(); return 'tk_attribute_s'; 
break;
case 63:return 6
break;
case 64:return 'anything'
break;
case 65: errors.push({ tipo: "Léxico", error: yy_.yytext, origen: "C3D", linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/[\s\S]*?)/i,/^(?:\/\*[\s\S\n]*?\*\/)/i,/^(?:<\?xml[\s\S\n]*?\?>)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:T[0-9]+)/i,/^(?:L[0-9]+)/i,/^(?:#)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:include\b)/i,/^(?:stdio\.h\b)/i,/^(?:float\b)/i,/^(?:void\b)/i,/^(?:int\b)/i,/^(?:if\b)/i,/^(?:goto\b)/i,/^(?:printf\b)/i,/^(?:Heap\b)/i,/^(?:Stack\b)/i,/^(?:SP\b)/i,/^(?:HP\b)/i,/^(?:return\b)/i,/^(?:[\w\u00e1\u00e9\u00ed\u00f3\u00fa\u00c1\u00c9\u00cd\u00d3\u00da\u00f1\u00d1]+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:['])/i,/^(?:[^'\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:['])/i,/^(?:$)/i,/^(?:[^></]+)/i,/^(?:.)/i],
conditions: {"string_singleq":{"rules":[54,55,56,57,58,59,60,61,62],"inclusive":false},"string_doubleq":{"rules":[44,45,46,47,48,49,50,51,52],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,53,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c3d_up;
exports.Parser = c3d_up.Parser;
exports.parse = function () { return c3d_up.parse.apply(c3d_up, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}