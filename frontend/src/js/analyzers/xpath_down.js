/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xpath_down = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[1,17],$Va=[1,18],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[1,25],$Vi=[1,26],$Vj=[5,6,9,10,12,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61],$Vk=[2,18],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,34],$Vq=[5,6,9,10,12,13,15,16,17,19,21,25,26,27,28,29,30,33,34,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61],$Vr=[2,12],$Vs=[1,44],$Vt=[1,45],$Vu=[1,46],$Vv=[1,48],$Vw=[2,22],$Vx=[1,50],$Vy=[1,51],$Vz=[12,13,21,25,26,27,28,29,30,33,34,35,36,37,38],$VA=[2,49],$VB=[1,59],$VC=[1,57],$VD=[1,58],$VE=[1,83],$VF=[2,34],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[12,21,25,26,27,28,29,30],$VN=[2,43],$VO=[1,87],$VP=[1,85],$VQ=[1,86],$VR=[1,88],$VS=[1,89],$VT=[1,90],$VU=[1,91],$VV=[5,6,9,10,12,13,21,25,26,27,28,29,30,33,34,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61],$VW=[2,25],$VX=[1,101];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"CONTI":4,"EOF":5,"tk_punto":6,"AXES":7,"CONTIp":8,"tk_bar":9,"tk_2bar":10,"PAL":11,"tk_4puntos":12,"tk_por":13,"SUBAX":14,"tk_arroba":15,"tk_line":16,"tk_2puntos":17,"CORCHET":18,"tk_corA":19,"E":20,"tk_corC":21,"CORCHETp":22,"T":23,"Ep":24,"tk_menorigual":25,"tk_menor":26,"tk_mayor":27,"tk_mayorigual":28,"tk_or":29,"tk_and":30,"F":31,"Tp":32,"tk_mas":33,"tk_menos":34,"tk_div":35,"tk_mod":36,"tk_diferent":37,"tk_equal":38,"O":39,"num":40,"tk_id":41,"tk_ancestor":42,"tk_ancestor2":43,"tk_attribute_d":44,"tk_attribute_s":45,"tk_child":46,"tk_descendant":47,"tk_descendant2":48,"tk_following":49,"tk_following2":50,"tk_namespace":51,"tk_parent":52,"tk_preceding":53,"tk_preceding2":54,"tk_self":55,"tk_node":56,"tk_ParA":57,"tk_ParC":58,"tk_last":59,"tk_text":60,"tk_position":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"tk_punto",9:"tk_bar",10:"tk_2bar",12:"tk_4puntos",13:"tk_por",15:"tk_arroba",16:"tk_line",17:"tk_2puntos",19:"tk_corA",21:"tk_corC",25:"tk_menorigual",26:"tk_menor",27:"tk_mayor",28:"tk_mayorigual",29:"tk_or",30:"tk_and",33:"tk_mas",34:"tk_menos",35:"tk_div",36:"tk_mod",37:"tk_diferent",38:"tk_equal",40:"num",41:"tk_id",42:"tk_ancestor",43:"tk_ancestor2",44:"tk_attribute_d",45:"tk_attribute_s",46:"tk_child",47:"tk_descendant",48:"tk_descendant2",49:"tk_following",50:"tk_following2",51:"tk_namespace",52:"tk_parent",53:"tk_preceding",54:"tk_preceding2",55:"tk_self",56:"tk_node",57:"tk_ParA",58:"tk_ParC",59:"tk_last",60:"tk_text",61:"tk_position"},
productions_: [0,[3,2],[4,3],[4,3],[4,3],[4,3],[4,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,0],[7,2],[7,2],[7,1],[7,1],[7,1],[7,0],[14,1],[14,1],[14,1],[14,0],[18,4],[22,4],[22,0],[20,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,0],[23,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,0],[31,2],[31,1],[31,1],[31,1],[31,1],[31,0],[39,1],[39,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,3],[11,3],[11,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("fin del archivo descendente");
break;
}
},
table: [{3:1,4:2,6:[1,3],9:[1,4],10:[1,5],11:6,12:[1,7],41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},{1:[3]},{5:[1,27]},o($Vj,$Vk,{7:28,18:33,13:$Vl,15:$Vm,16:$Vn,17:$Vo,19:$Vp}),o($Vj,$Vk,{18:33,7:35,13:$Vl,15:$Vm,16:$Vn,17:$Vo,19:$Vp}),o($Vj,$Vk,{18:33,7:36,13:$Vl,15:$Vm,16:$Vn,17:$Vo,19:$Vp}),o($Vj,$Vk,{18:33,7:37,13:$Vl,15:$Vm,16:$Vn,17:$Vo,19:$Vp}),o($Vj,$Vk,{18:33,7:38,13:$Vl,15:$Vm,16:$Vn,17:$Vo,19:$Vp}),o($Vq,[2,52]),o($Vq,[2,53]),o($Vq,[2,54]),o($Vq,[2,55]),o($Vq,[2,56]),o($Vq,[2,57]),o($Vq,[2,58]),o($Vq,[2,59]),o($Vq,[2,60]),o($Vq,[2,61]),o($Vq,[2,62]),o($Vq,[2,63]),o($Vq,[2,64]),o($Vq,[2,65]),o($Vq,[2,66]),{57:[1,39]},{57:[1,40]},{57:[1,41]},{57:[1,42]},{1:[2,1]},{5:$Vr,6:$Vs,8:43,9:$Vt,10:$Vu,11:47,12:$Vv,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},o($Vj,$Vw,{14:49,18:52,13:$Vx,15:$Vy,19:$Vp}),o($Vj,$Vw,{18:52,14:53,13:$Vx,15:$Vy,19:$Vp}),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vz,$VA,{20:54,23:55,31:56,11:60,18:61,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),{5:$Vr,6:$Vs,8:62,9:$Vt,10:$Vu,11:47,12:$Vv,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},{5:$Vr,6:$Vs,8:63,9:$Vt,10:$Vu,11:47,12:$Vv,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},{5:$Vr,6:$Vs,8:64,9:$Vt,10:$Vu,11:47,12:$Vv,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},{5:$Vr,6:$Vs,8:65,9:$Vt,10:$Vu,11:47,12:$Vv,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},{58:[1,66]},{58:[1,67]},{58:[1,68]},{58:[1,69]},{5:[2,2]},o($Vj,$Vk,{18:33,7:70,13:$Vl,15:$Vm,16:$Vn,17:$Vo,19:$Vp}),o($Vj,$Vk,{18:33,7:71,13:$Vl,15:$Vm,16:$Vn,17:$Vo,19:$Vp}),o($Vj,$Vk,{18:33,7:72,13:$Vl,15:$Vm,16:$Vn,17:$Vo,19:$Vp}),o($Vj,$Vk,{18:33,7:73,13:$Vl,15:$Vm,16:$Vn,17:$Vo,19:$Vp}),o($Vj,$Vk,{18:33,7:74,13:$Vl,15:$Vm,16:$Vn,17:$Vo,19:$Vp}),o($Vj,[2,13]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,14]),{21:[1,75]},{12:$VE,21:$VF,24:76,25:$VG,26:$VH,27:$VI,28:$VJ,29:$VK,30:$VL},o($VM,$VN,{32:84,13:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU}),{13:[1,94],39:92,41:[1,93]},o($Vz,[2,45]),o($Vz,[2,46]),o($Vz,[2,47]),o($Vz,[2,48]),{5:[2,3]},{5:[2,4]},{5:[2,5]},{5:[2,6]},o($Vq,[2,67]),o($Vq,[2,68]),o($Vq,[2,69]),o($Vq,[2,70]),{5:$Vr,6:$Vs,8:95,9:$Vt,10:$Vu,11:47,12:$Vv,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},{5:$Vr,6:$Vs,8:96,9:$Vt,10:$Vu,11:47,12:$Vv,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},{5:$Vr,6:$Vs,8:97,9:$Vt,10:$Vu,11:47,12:$Vv,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},{5:$Vr,6:$Vs,8:98,9:$Vt,10:$Vu,11:47,12:$Vv,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},{5:$Vr,6:$Vs,8:99,9:$Vt,10:$Vu,11:47,12:$Vv,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VV,$VW,{22:100,19:$VX}),{21:[2,26]},o($Vz,$VA,{31:56,11:60,18:61,23:102,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{31:56,11:60,18:61,23:103,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{31:56,11:60,18:61,23:104,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{31:56,11:60,18:61,23:105,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{31:56,11:60,18:61,23:106,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{31:56,11:60,18:61,23:107,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{31:56,11:60,18:61,23:108,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($VM,[2,35]),o($Vz,$VA,{11:60,18:61,31:109,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{11:60,18:61,31:110,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{11:60,18:61,31:111,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{11:60,18:61,31:112,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{11:60,18:61,31:113,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{11:60,18:61,31:114,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,$VA,{11:60,18:61,31:115,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),o($Vz,[2,44]),o($Vz,[2,50]),o($Vz,[2,51]),{5:[2,7]},{5:[2,8]},{5:[2,9]},{5:[2,10]},{5:[2,11]},o($VV,[2,23]),o($Vz,$VA,{23:55,31:56,11:60,18:61,20:116,6:$VB,15:$VC,19:$Vp,40:$VD,41:$V0,42:$V1,43:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:$Vg,60:$Vh,61:$Vi}),{12:$VE,21:$VF,24:117,25:$VG,26:$VH,27:$VI,28:$VJ,29:$VK,30:$VL},{12:$VE,21:$VF,24:118,25:$VG,26:$VH,27:$VI,28:$VJ,29:$VK,30:$VL},{12:$VE,21:$VF,24:119,25:$VG,26:$VH,27:$VI,28:$VJ,29:$VK,30:$VL},{12:$VE,21:$VF,24:120,25:$VG,26:$VH,27:$VI,28:$VJ,29:$VK,30:$VL},{12:$VE,21:$VF,24:121,25:$VG,26:$VH,27:$VI,28:$VJ,29:$VK,30:$VL},{12:$VE,21:$VF,24:122,25:$VG,26:$VH,27:$VI,28:$VJ,29:$VK,30:$VL},{12:$VE,21:$VF,24:123,25:$VG,26:$VH,27:$VI,28:$VJ,29:$VK,30:$VL},o($VM,$VN,{32:124,13:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU}),o($VM,$VN,{32:125,13:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU}),o($VM,$VN,{32:126,13:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU}),o($VM,$VN,{32:127,13:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU}),o($VM,$VN,{32:128,13:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU}),o($VM,$VN,{32:129,13:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU}),o($VM,$VN,{32:130,13:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU}),{21:[1,131]},{21:[2,27]},{21:[2,28]},{21:[2,29]},{21:[2,30]},{21:[2,31]},{21:[2,32]},{21:[2,33]},o($VM,[2,36]),o($VM,[2,37]),o($VM,[2,38]),o($VM,[2,39]),o($VM,[2,40]),o($VM,[2,41]),o($VM,[2,42]),o($VV,$VW,{22:132,19:$VX}),o($VV,[2,24])],
defaultActions: {27:[2,1],43:[2,2],62:[2,3],63:[2,4],64:[2,5],65:[2,6],76:[2,26],95:[2,7],96:[2,8],97:[2,9],98:[2,10],99:[2,11],117:[2,27],118:[2,28],119:[2,29],120:[2,30],121:[2,31],122:[2,32],123:[2,33]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var attribute = '';
	var errors = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Whitespace
break;
case 1:// MultiLineComment
break;
case 2:// Declaration XML
break;
case 3:return 40
break;
case 4:return 26
break;
case 5:return 27
break;
case 6:return 9
break;
case 7:return 10
break;
case 8:return 38
break;
case 9:return 6
break;
case 10:return 17
break;
case 11:return 12
break;
case 12:return 15
break;
case 13:return 19
break;
case 14:return 21
break;
case 15:return 57
break;
case 16:return 58
break;
case 17:return 13
break;
case 18:return 42
break;
case 19:return 43
break;
case 20:return 'tk_attribute'
break;
case 21:return 46
break;
case 22:return 47
break;
case 23:return 48
break;
case 24:return 49
break;
case 25:return 50
break;
case 26:return 51 //no se si namespace se refiere al propio nombre de un nodo o si es una palabra reservada. asi que lo agrego por si acaso
break;
case 27:return 52
break;
case 28:return 53
break;
case 29:return 54
break;
case 30:return 55
break;
case 31:return 56
break;
case 32:return 59
break;
case 33:return 60
break;
case 34:return 61
break;
case 35:return 16
break;
case 36:return 33
break;
case 37:return 34
break;
case 38:return 35
break;
case 39:return 37
break;
case 40:return 25
break;
case 41:return 28
break;
case 42:return 29
break;
case 43:return 30
break;
case 44:return 36
break;
case 45:return 41
break;
case 46: attribute = ''; this.begin("string_doubleq"); 
break;
case 47: attribute += yy_.yytext; 
break;
case 48: attribute += "\""; 
break;
case 49: attribute += "\n"; 
break;
case 50: attribute += " ";  
break;
case 51: attribute += "\t"; 
break;
case 52: attribute += "\\"; 
break;
case 53: attribute += "\'"; 
break;
case 54: attribute += "\r"; 
break;
case 55: yy_.yytext = attribute; this.popState(); return 44; 
break;
case 56: attribute = ''; this.begin("string_singleq"); 
break;
case 57: attribute += yy_.yytext; 
break;
case 58: attribute += "\""; 
break;
case 59: attribute += "\n"; 
break;
case 60: attribute += " ";  
break;
case 61: attribute += "\t"; 
break;
case 62: attribute += "\\"; 
break;
case 63: attribute += "\'"; 
break;
case 64: attribute += "\r"; 
break;
case 65: yy_.yytext = attribute; this.popState(); return 45; 
break;
case 66:return 5
break;
case 67:return 'anything'
break;
case 68: errors.push({ tipo: "Léxico", error: yy_.yytext, origen: "XML", linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:<!--[\s\S\n]*?-->)/i,/^(?:<\?xml[\s\S\n]*?\?>)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\/)/i,/^(?:\/\/)/i,/^(?:=)/i,/^(?:\.)/i,/^(?:\.\.)/i,/^(?:::)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\*)/i,/^(?:ancestor\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant\b)/i,/^(?:descendant-or-self\b)/i,/^(?:following\b)/i,/^(?:following-sibling\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:preceding-sibling\b)/i,/^(?:self\b)/i,/^(?:node\b)/i,/^(?:last\b)/i,/^(?:text\b)/i,/^(?:position\b)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:div\b)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:[\w\u00e1\u00e9\u00ed\u00f3\u00fa\u00c1\u00c9\u00cd\u00d3\u00da\u00f1\u00d1]+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:['])/i,/^(?:[^'\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:['])/i,/^(?:$)/i,/^(?:[^></]+)/i,/^(?:.)/i],
conditions: {"string_singleq":{"rules":[57,58,59,60,61,62,63,64,65],"inclusive":false},"string_doubleq":{"rules":[47,48,49,50,51,52,53,54,55],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,56,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xpath_down;
exports.Parser = xpath_down.Parser;
exports.parse = function () { return xpath_down.parse.apply(xpath_down, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}